
control-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002300  00002394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006e  0080006e  000023a2  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001378  00000000  00000000  0000493c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009848  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000099a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <main>
      8a:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* setup buzzer pin direction as output pin */
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 af 06 	call	0xd5e	; 0xd5e <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_ON>:

void Buzzer_ON(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	/* Activate Buzzer */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_OFF>:

void Buzzer_OFF()
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	/* Disable Buzzer */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_Init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void DcMotor_Init(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	/* Setup the direction for the two motor pins through the GPIO driver */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,PIN_OUTPUT);
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	66 e0       	ldi	r22, 0x06	; 6
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 af 06 	call	0xd5e	; 0xd5e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,PIN_OUTPUT);
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	67 e0       	ldi	r22, 0x07	; 7
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 af 06 	call	0xd5e	; 0xd5e <GPIO_setupPinDirection>

	DcMotor_Rotate(Stop);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DcMotor_Rotate>
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01


	if (state == Stop)
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 23       	and	r24, r24
     bc6:	59 f4       	brne	.+22     	; 0xbde <DcMotor_Rotate+0x28>
	{
		// Stop the motor
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	67 e0       	ldi	r22, 0x07	; 7
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
     bdc:	1b c0       	rjmp	.+54     	; 0xc14 <DcMotor_Rotate+0x5e>

	}

	else if (state == Anti_Clockwise)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	59 f4       	brne	.+22     	; 0xbfa <DcMotor_Rotate+0x44>
	{
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	66 e0       	ldi	r22, 0x06	; 6
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_HIGH);
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <DcMotor_Rotate+0x5e>
	}
	else if (state == Clockwise)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	51 f4       	brne	.+20     	; 0xc14 <DcMotor_Rotate+0x5e>
	{
		// Rotate the motor --> clock wise
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	66 e0       	ldi	r22, 0x06	; 6
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	67 e0       	ldi	r22, 0x07	; 7
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 9a 07 	call	0xf34	; 0xf34 <GPIO_writePin>
	}

}
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <EEPROM_writeByte>:
 *******************************************************************************/
#include "eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <EEPROM_writeByte+0x6>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <EEPROM_writeByte+0x8>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c2e:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c32:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     c36:	88 30       	cpi	r24, 0x08	; 8
     c38:	11 f0       	breq	.+4      	; 0xc3e <EEPROM_writeByte+0x22>
        return ERROR;
     c3a:	1c 82       	std	Y+4, r1	; 0x04
     c3c:	28 c0       	rjmp	.+80     	; 0xc8e <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	80 70       	andi	r24, 0x00	; 0
     c44:	97 70       	andi	r25, 0x07	; 7
     c46:	88 0f       	add	r24, r24
     c48:	89 2f       	mov	r24, r25
     c4a:	88 1f       	adc	r24, r24
     c4c:	99 0b       	sbc	r25, r25
     c4e:	91 95       	neg	r25
     c50:	80 6a       	ori	r24, 0xA0	; 160
     c52:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c56:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     c5a:	88 31       	cpi	r24, 0x18	; 24
     c5c:	11 f0       	breq	.+4      	; 0xc62 <EEPROM_writeByte+0x46>
        return ERROR;
     c5e:	1c 82       	std	Y+4, r1	; 0x04
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c68:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     c6c:	88 32       	cpi	r24, 0x28	; 40
     c6e:	11 f0       	breq	.+4      	; 0xc74 <EEPROM_writeByte+0x58>
        return ERROR;
     c70:	1c 82       	std	Y+4, r1	; 0x04
     c72:	0d c0       	rjmp	.+26     	; 0xc8e <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c7a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     c7e:	88 32       	cpi	r24, 0x28	; 40
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_writeByte+0x6a>
        return ERROR;
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c86:	0e 94 21 0a 	call	0x1442	; 0x1442 <TWI_stop>

    return SUCCESS;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	8c 83       	std	Y+4, r24	; 0x04
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EEPROM_readByte+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EEPROM_readByte+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	7c 83       	std	Y+4, r23	; 0x04
     cb2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cb4:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cb8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <EEPROM_readByte+0x26>
        return ERROR;
     cc0:	1d 82       	std	Y+5, r1	; 0x05
     cc2:	44 c0       	rjmp	.+136    	; 0xd4c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	80 70       	andi	r24, 0x00	; 0
     cca:	97 70       	andi	r25, 0x07	; 7
     ccc:	88 0f       	add	r24, r24
     cce:	89 2f       	mov	r24, r25
     cd0:	88 1f       	adc	r24, r24
     cd2:	99 0b       	sbc	r25, r25
     cd4:	91 95       	neg	r25
     cd6:	80 6a       	ori	r24, 0xA0	; 160
     cd8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cdc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     ce0:	88 31       	cpi	r24, 0x18	; 24
     ce2:	11 f0       	breq	.+4      	; 0xce8 <EEPROM_readByte+0x4a>
        return ERROR;
     ce4:	1d 82       	std	Y+5, r1	; 0x05
     ce6:	32 c0       	rjmp	.+100    	; 0xd4c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cee:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     cf2:	88 32       	cpi	r24, 0x28	; 40
     cf4:	11 f0       	breq	.+4      	; 0xcfa <EEPROM_readByte+0x5c>
        return ERROR;
     cf6:	1d 82       	std	Y+5, r1	; 0x05
     cf8:	29 c0       	rjmp	.+82     	; 0xd4c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     cfa:	0e 94 11 0a 	call	0x1422	; 0x1422 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     cfe:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     d02:	80 31       	cpi	r24, 0x10	; 16
     d04:	11 f0       	breq	.+4      	; 0xd0a <EEPROM_readByte+0x6c>
        return ERROR;
     d06:	1d 82       	std	Y+5, r1	; 0x05
     d08:	21 c0       	rjmp	.+66     	; 0xd4c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	80 70       	andi	r24, 0x00	; 0
     d10:	97 70       	andi	r25, 0x07	; 7
     d12:	88 0f       	add	r24, r24
     d14:	89 2f       	mov	r24, r25
     d16:	88 1f       	adc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	91 95       	neg	r25
     d1c:	81 6a       	ori	r24, 0xA1	; 161
     d1e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d22:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     d26:	80 34       	cpi	r24, 0x40	; 64
     d28:	11 f0       	breq	.+4      	; 0xd2e <EEPROM_readByte+0x90>
        return ERROR;
     d2a:	1d 82       	std	Y+5, r1	; 0x05
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d2e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <TWI_readByteWithNACK>
     d32:	eb 81       	ldd	r30, Y+3	; 0x03
     d34:	fc 81       	ldd	r31, Y+4	; 0x04
     d36:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d38:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TWI_getStatus>
     d3c:	88 35       	cpi	r24, 0x58	; 88
     d3e:	11 f0       	breq	.+4      	; 0xd44 <EEPROM_readByte+0xa6>
        return ERROR;
     d40:	1d 82       	std	Y+5, r1	; 0x05
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d44:	0e 94 21 0a 	call	0x1442	; 0x1442 <TWI_stop>

    return SUCCESS;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <GPIO_setupPinDirection+0x6>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <GPIO_setupPinDirection+0x8>
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	6a 83       	std	Y+2, r22	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	88 30       	cpi	r24, 0x08	; 8
     d76:	08 f0       	brcs	.+2      	; 0xd7a <GPIO_setupPinDirection+0x1c>
     d78:	d5 c0       	rjmp	.+426    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	84 30       	cpi	r24, 0x04	; 4
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <GPIO_setupPinDirection+0x24>
     d80:	d1 c0       	rjmp	.+418    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	3d 83       	std	Y+5, r19	; 0x05
     d8a:	2c 83       	std	Y+4, r18	; 0x04
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <GPIO_setupPinDirection+0x3a>
     d96:	43 c0       	rjmp	.+134    	; 0xe1e <GPIO_setupPinDirection+0xc0>
     d98:	2c 81       	ldd	r18, Y+4	; 0x04
     d9a:	3d 81       	ldd	r19, Y+5	; 0x05
     d9c:	22 30       	cpi	r18, 0x02	; 2
     d9e:	31 05       	cpc	r19, r1
     da0:	2c f4       	brge	.+10     	; 0xdac <GPIO_setupPinDirection+0x4e>
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	71 f0       	breq	.+28     	; 0xdc6 <GPIO_setupPinDirection+0x68>
     daa:	bc c0       	rjmp	.+376    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
     dac:	2c 81       	ldd	r18, Y+4	; 0x04
     dae:	3d 81       	ldd	r19, Y+5	; 0x05
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <GPIO_setupPinDirection+0x5a>
     db6:	5f c0       	rjmp	.+190    	; 0xe76 <GPIO_setupPinDirection+0x118>
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <GPIO_setupPinDirection+0x66>
     dc2:	85 c0       	rjmp	.+266    	; 0xece <GPIO_setupPinDirection+0x170>
     dc4:	af c0       	rjmp	.+350    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	a1 f4       	brne	.+40     	; 0xdf4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dcc:	aa e3       	ldi	r26, 0x3A	; 58
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e3       	ldi	r30, 0x3A	; 58
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <GPIO_setupPinDirection+0x8c>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <GPIO_setupPinDirection+0x88>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	98 c0       	rjmp	.+304    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     df4:	aa e3       	ldi	r26, 0x3A	; 58
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ea e3       	ldi	r30, 0x3A	; 58
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <GPIO_setupPinDirection+0xb4>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <GPIO_setupPinDirection+0xb0>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	83 c0       	rjmp	.+262    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	a1 f4       	brne	.+40     	; 0xe4c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e24:	a7 e3       	ldi	r26, 0x37	; 55
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e3       	ldi	r30, 0x37	; 55
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_setupPinDirection+0xe4>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_setupPinDirection+0xe0>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	6c c0       	rjmp	.+216    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e4c:	a7 e3       	ldi	r26, 0x37	; 55
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e3       	ldi	r30, 0x37	; 55
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_setupPinDirection+0x10c>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_setupPinDirection+0x108>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	57 c0       	rjmp	.+174    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_setupPinDirection+0x13c>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_setupPinDirection+0x138>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	40 c0       	rjmp	.+128    	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ea4:	a4 e3       	ldi	r26, 0x34	; 52
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e4 e3       	ldi	r30, 0x34	; 52
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_setupPinDirection+0x164>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_setupPinDirection+0x160>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	2b c0       	rjmp	.+86     	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_setupPinDirection+0x194>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_setupPinDirection+0x190>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     efc:	a1 e3       	ldi	r26, 0x31	; 49
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e1 e3       	ldi	r30, 0x31	; 49
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_setupPinDirection+0x1bc>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_setupPinDirection+0x1b8>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <GPIO_writePin+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <GPIO_writePin+0x8>
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	6a 83       	std	Y+2, r22	; 0x02
     f46:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 30       	cpi	r24, 0x08	; 8
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <GPIO_writePin+0x1c>
     f4e:	d5 c0       	rjmp	.+426    	; 0x10fa <GPIO_writePin+0x1c6>
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	84 30       	cpi	r24, 0x04	; 4
     f54:	08 f0       	brcs	.+2      	; 0xf58 <GPIO_writePin+0x24>
     f56:	d1 c0       	rjmp	.+418    	; 0x10fa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3d 83       	std	Y+5, r19	; 0x05
     f60:	2c 83       	std	Y+4, r18	; 0x04
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <GPIO_writePin+0x3a>
     f6c:	43 c0       	rjmp	.+134    	; 0xff4 <GPIO_writePin+0xc0>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	2c f4       	brge	.+10     	; 0xf82 <GPIO_writePin+0x4e>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	71 f0       	breq	.+28     	; 0xf9c <GPIO_writePin+0x68>
     f80:	bc c0       	rjmp	.+376    	; 0x10fa <GPIO_writePin+0x1c6>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <GPIO_writePin+0x5a>
     f8c:	5f c0       	rjmp	.+190    	; 0x104c <GPIO_writePin+0x118>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <GPIO_writePin+0x66>
     f98:	85 c0       	rjmp	.+266    	; 0x10a4 <GPIO_writePin+0x170>
     f9a:	af c0       	rjmp	.+350    	; 0x10fa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_writePin+0x8c>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_writePin+0x88>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	98 c0       	rjmp	.+304    	; 0x10fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fca:	ab e3       	ldi	r26, 0x3B	; 59
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <GPIO_writePin+0xb4>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <GPIO_writePin+0xb0>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	83 c0       	rjmp	.+262    	; 0x10fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_writePin+0xe4>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_writePin+0xe0>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	6c c0       	rjmp	.+216    	; 0x10fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_writePin+0x10c>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_writePin+0x108>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	57 c0       	rjmp	.+174    	; 0x10fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	a1 f4       	brne	.+40     	; 0x107a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1052:	a5 e3       	ldi	r26, 0x35	; 53
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_writePin+0x13c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_writePin+0x138>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	40 c0       	rjmp	.+128    	; 0x10fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    107a:	a5 e3       	ldi	r26, 0x35	; 53
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e3       	ldi	r30, 0x35	; 53
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <GPIO_writePin+0x164>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <GPIO_writePin+0x160>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	2b c0       	rjmp	.+86     	; 0x10fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	a1 f4       	brne	.+40     	; 0x10d2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10aa:	a2 e3       	ldi	r26, 0x32	; 50
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e2 e3       	ldi	r30, 0x32	; 50
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_writePin+0x194>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_writePin+0x190>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10d2:	a2 e3       	ldi	r26, 0x32	; 50
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e2 e3       	ldi	r30, 0x32	; 50
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_writePin+0x1bc>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_writePin+0x1b8>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPIO_readPin+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_readPin+0x8>
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    111c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <GPIO_readPin+0x1c>
    1124:	84 c0       	rjmp	.+264    	; 0x122e <GPIO_readPin+0x124>
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	08 f0       	brcs	.+2      	; 0x112e <GPIO_readPin+0x24>
    112c:	80 c0       	rjmp	.+256    	; 0x122e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3d 83       	std	Y+5, r19	; 0x05
    1136:	2c 83       	std	Y+4, r18	; 0x04
    1138:	4c 81       	ldd	r20, Y+4	; 0x04
    113a:	5d 81       	ldd	r21, Y+5	; 0x05
    113c:	41 30       	cpi	r20, 0x01	; 1
    113e:	51 05       	cpc	r21, r1
    1140:	79 f1       	breq	.+94     	; 0x11a0 <GPIO_readPin+0x96>
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <GPIO_readPin+0x4e>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	21 15       	cp	r18, r1
    1152:	31 05       	cpc	r19, r1
    1154:	69 f0       	breq	.+26     	; 0x1170 <GPIO_readPin+0x66>
    1156:	6b c0       	rjmp	.+214    	; 0x122e <GPIO_readPin+0x124>
    1158:	4c 81       	ldd	r20, Y+4	; 0x04
    115a:	5d 81       	ldd	r21, Y+5	; 0x05
    115c:	42 30       	cpi	r20, 0x02	; 2
    115e:	51 05       	cpc	r21, r1
    1160:	b9 f1       	breq	.+110    	; 0x11d0 <GPIO_readPin+0xc6>
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <GPIO_readPin+0x64>
    116c:	49 c0       	rjmp	.+146    	; 0x1200 <GPIO_readPin+0xf6>
    116e:	5f c0       	rjmp	.+190    	; 0x122e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1170:	e9 e3       	ldi	r30, 0x39	; 57
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_readPin+0x7e>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_readPin+0x7a>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	90 70       	andi	r25, 0x00	; 0
    1192:	88 23       	and	r24, r24
    1194:	19 f0       	breq	.+6      	; 0x119c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	49 c0       	rjmp	.+146    	; 0x122e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    119c:	19 82       	std	Y+1, r1	; 0x01
    119e:	47 c0       	rjmp	.+142    	; 0x122e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11a0:	e6 e3       	ldi	r30, 0x36	; 54
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_readPin+0xae>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_readPin+0xaa>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	88 23       	and	r24, r24
    11c4:	19 f0       	breq	.+6      	; 0x11cc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	31 c0       	rjmp	.+98     	; 0x122e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11cc:	19 82       	std	Y+1, r1	; 0x01
    11ce:	2f c0       	rjmp	.+94     	; 0x122e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11d0:	e3 e3       	ldi	r30, 0x33	; 51
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a9 01       	movw	r20, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_readPin+0xde>
    11e4:	55 95       	asr	r21
    11e6:	47 95       	ror	r20
    11e8:	8a 95       	dec	r24
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_readPin+0xda>
    11ec:	ca 01       	movw	r24, r20
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	90 70       	andi	r25, 0x00	; 0
    11f2:	88 23       	and	r24, r24
    11f4:	19 f0       	breq	.+6      	; 0x11fc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	19 c0       	rjmp	.+50     	; 0x122e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11fc:	19 82       	std	Y+1, r1	; 0x01
    11fe:	17 c0       	rjmp	.+46     	; 0x122e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1200:	e0 e3       	ldi	r30, 0x30	; 48
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_readPin+0x10e>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_readPin+0x10a>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	88 23       	and	r24, r24
    1224:	19 f0       	breq	.+6      	; 0x122c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	01 c0       	rjmp	.+2      	; 0x122e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    122c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_setupPortDirection+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_setupPortDirection+0x8>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	90 f5       	brcc	.+100    	; 0x12ba <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	d1 f0       	breq	.+52     	; 0x129e <GPIO_setupPortDirection+0x5e>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	2c f4       	brge	.+10     	; 0x127e <GPIO_setupPortDirection+0x3e>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	61 f0       	breq	.+24     	; 0x1294 <GPIO_setupPortDirection+0x54>
    127c:	1e c0       	rjmp	.+60     	; 0x12ba <GPIO_setupPortDirection+0x7a>
    127e:	2b 81       	ldd	r18, Y+3	; 0x03
    1280:	3c 81       	ldd	r19, Y+4	; 0x04
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <GPIO_setupPortDirection+0x68>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <GPIO_setupPortDirection+0x72>
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1294:	ea e3       	ldi	r30, 0x3A	; 58
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    129e:	e7 e3       	ldi	r30, 0x37	; 55
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
    12b0:	04 c0       	rjmp	.+8      	; 0x12ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12b2:	e1 e3       	ldi	r30, 0x31	; 49
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GPIO_writePort+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <GPIO_writePort+0x8>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	90 f5       	brcc	.+100    	; 0x1342 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3c 83       	std	Y+4, r19	; 0x04
    12e6:	2b 83       	std	Y+3, r18	; 0x03
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	d1 f0       	breq	.+52     	; 0x1326 <GPIO_writePort+0x5e>
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	2c f4       	brge	.+10     	; 0x1306 <GPIO_writePort+0x3e>
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	61 f0       	breq	.+24     	; 0x131c <GPIO_writePort+0x54>
    1304:	1e c0       	rjmp	.+60     	; 0x1342 <GPIO_writePort+0x7a>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	31 05       	cpc	r19, r1
    130e:	81 f0       	breq	.+32     	; 0x1330 <GPIO_writePort+0x68>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	81 f0       	breq	.+32     	; 0x133a <GPIO_writePort+0x72>
    131a:	13 c0       	rjmp	.+38     	; 0x1342 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1326:	e8 e3       	ldi	r30, 0x38	; 56
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	80 83       	st	Z, r24
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    133a:	e2 e3       	ldi	r30, 0x32	; 50
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	80 83       	st	Z, r24
			break;
		}
	}
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <GPIO_readPort+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <GPIO_readPort+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    135e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	90 f5       	brcc	.+100    	; 0x13ca <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	d1 f0       	breq	.+52     	; 0x13ae <GPIO_readPort+0x5e>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <GPIO_readPort+0x3e>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <GPIO_readPort+0x54>
    138c:	1e c0       	rjmp	.+60     	; 0x13ca <GPIO_readPort+0x7a>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	3c 81       	ldd	r19, Y+4	; 0x04
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <GPIO_readPort+0x68>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <GPIO_readPort+0x72>
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	0e c0       	rjmp	.+28     	; 0x13ca <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13b8:	e3 e3       	ldi	r30, 0x33	; 51
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13c2:	e0 e3       	ldi	r30, 0x30	; 48
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(I2C_ConfigType *config_ptr)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <TWI_init+0x6>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    13e8:	e0 e2       	ldi	r30, 0x20	; 32
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	80 83       	st	Z, r24
	TWSR = (TWSR & 0XFC) |(config_ptr->prescalar);
    13f0:	a1 e2       	ldi	r26, 0x21	; 33
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e1 e2       	ldi	r30, 0x21	; 33
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	98 2f       	mov	r25, r24
    13fc:	9c 7f       	andi	r25, 0xFC	; 252
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	80 81       	ld	r24, Z
    1404:	89 2b       	or	r24, r25
    1406:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    1408:	e2 e2       	ldi	r30, 0x22	; 34
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1410:	e6 e5       	ldi	r30, 0x56	; 86
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	80 83       	st	Z, r24
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TWI_start>:

void TWI_start(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	84 ea       	ldi	r24, 0xA4	; 164
    1430:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1432:	e6 e5       	ldi	r30, 0x56	; 86
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	88 23       	and	r24, r24
    143a:	dc f7       	brge	.-10     	; 0x1432 <TWI_start+0x10>
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <TWI_stop>:

void TWI_stop(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    144a:	e6 e5       	ldi	r30, 0x56	; 86
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	84 e9       	ldi	r24, 0x94	; 148
    1450:	80 83       	st	Z, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1464:	e3 e2       	ldi	r30, 0x23	; 35
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    146c:	e6 e5       	ldi	r30, 0x56	; 86
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	84 e8       	ldi	r24, 0x84	; 132
    1472:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1474:	e6 e5       	ldi	r30, 0x56	; 86
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	88 23       	and	r24, r24
    147c:	dc f7       	brge	.-10     	; 0x1474 <TWI_writeByte+0x1c>
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    148e:	e6 e5       	ldi	r30, 0x56	; 86
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	84 ec       	ldi	r24, 0xC4	; 196
    1494:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1496:	e6 e5       	ldi	r30, 0x56	; 86
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	88 23       	and	r24, r24
    149e:	dc f7       	brge	.-10     	; 0x1496 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    14a0:	e3 e2       	ldi	r30, 0x23	; 35
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    14b4:	e6 e5       	ldi	r30, 0x56	; 86
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	84 e8       	ldi	r24, 0x84	; 132
    14ba:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14bc:	e6 e5       	ldi	r30, 0x56	; 86
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 23       	and	r24, r24
    14c4:	dc f7       	brge	.-10     	; 0x14bc <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    14c6:	e3 e2       	ldi	r30, 0x23	; 35
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14dc:	e1 e2       	ldi	r30, 0x21	; 33
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	88 7f       	andi	r24, 0xF8	; 248
    14e4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <timerCallBack>:
uint8 state=0;
uint16 address = 0x0000;        // Address which EEPROM is going to read //
TIMER_ConfigType Config_Ptr={F_CPU_256,CTC,DISCONNECTED,255,0};

void timerCallBack()
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	tick++;
    14f8:	80 91 6e 00 	lds	r24, 0x006E
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	80 93 6e 00 	sts	0x006E, r24
	if(tick < 122)
    1502:	80 91 6e 00 	lds	r24, 0x006E
    1506:	8a 37       	cpi	r24, 0x7A	; 122
    1508:	38 f4       	brcc	.+14     	; 0x1518 <timerCallBack+0x28>
	{
		tick=0;
    150a:	10 92 6e 00 	sts	0x006E, r1
		sec++;
    150e:	80 91 6f 00 	lds	r24, 0x006F
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	80 93 6f 00 	sts	0x006F, r24
	}
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <AppConfig>:

void AppConfig()
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	27 97       	sbiw	r28, 0x07	; 7
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
	UART_configType Config_ptr={a8_BitData,One_Stop_Bit,NO_Parity};
    1532:	87 e0       	ldi	r24, 0x07	; 7
    1534:	fe 01       	movw	r30, r28
    1536:	31 96       	adiw	r30, 0x01	; 1
    1538:	df 01       	movw	r26, r30
    153a:	98 2f       	mov	r25, r24
    153c:	1d 92       	st	X+, r1
    153e:	9a 95       	dec	r25
    1540:	e9 f7       	brne	.-6      	; 0x153c <AppConfig+0x1e>
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	ab 83       	std	Y+3, r26	; 0x03
    1550:	bc 83       	std	Y+4, r27	; 0x04
	UART_init(UART_BAUD_RATE,&Config_ptr);
    1552:	60 e8       	ldi	r22, 0x80	; 128
    1554:	75 e2       	ldi	r23, 0x25	; 37
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e 01       	movw	r18, r28
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	a9 01       	movw	r20, r18
    1562:	0e 94 0a 10 	call	0x2014	; 0x2014 <UART_init>


	TIMER0_init(&Config_Ptr);
    1566:	88 e6       	ldi	r24, 0x68	; 104
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <TIMER0_init>
	TIMER0_OVF_setCallBack(timerCallBack);
    156e:	88 e7       	ldi	r24, 0x78	; 120
    1570:	9a e0       	ldi	r25, 0x0A	; 10
    1572:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <TIMER0_OVF_setCallBack>
	DcMotor_Init();
    1576:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_Init>
	Buzzer_init();
    157a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
}
    157e:	27 96       	adiw	r28, 0x07	; 7
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <Motor_Delay>:

void Motor_Delay()
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	/*8000000 / 256 = 255 Hz
      compare value will be 7813 to produce an interrupt every 1 second
	 */
	sec=0;
    1598:	10 92 6f 00 	sts	0x006F, r1
	/* if the door is being opened (wait for 15 seconds ) */
	DcMotor_Rotate(Clockwise);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DcMotor_Rotate>
	while(sec < 15);
    15a2:	80 91 6f 00 	lds	r24, 0x006F
    15a6:	8f 30       	cpi	r24, 0x0F	; 15
    15a8:	e0 f3       	brcs	.-8      	; 0x15a2 <Motor_Delay+0x12>
	sec = 0;
    15aa:	10 92 6f 00 	sts	0x006F, r1
	/* let the door be opened for 3 seconds */
	DcMotor_Rotate(Stop);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DcMotor_Rotate>
	while(sec < 3);
    15b4:	80 91 6f 00 	lds	r24, 0x006F
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	e0 f3       	brcs	.-8      	; 0x15b4 <Motor_Delay+0x24>
	sec = 0;
    15bc:	10 92 6f 00 	sts	0x006F, r1

	/* door is locking for 15 seconds */
	DcMotor_Rotate(Anti_Clockwise);
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DcMotor_Rotate>
	while(sec < 15);
    15c6:	80 91 6f 00 	lds	r24, 0x006F
    15ca:	8f 30       	cpi	r24, 0x0F	; 15
    15cc:	e0 f3       	brcs	.-8      	; 0x15c6 <Motor_Delay+0x36>

	DcMotor_Rotate(Stop);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <DcMotor_Rotate>
	TIMER0_stop();
    15d4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <TIMER0_stop>
	state = 0;
    15d8:	10 92 71 00 	sts	0x0071, r1
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <main>:



int main()
{
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	ef 97       	sbiw	r28, 0x3f	; 63
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt */
	SREG|=(1<<7);
    15fa:	af e5       	ldi	r26, 0x5F	; 95
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ef e5       	ldi	r30, 0x5F	; 95
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	8c 93       	st	X, r24
	AppConfig();
    1608:	0e 94 8f 0a 	call	0x151e	; 0x151e <AppConfig>
	uint8 password[5],i=0;
    160c:	19 ae       	std	Y+57, r1	; 0x39
	I2C_ConfigType ptr={F_CPU_1};
    160e:	1f ae       	std	Y+63, r1	; 0x3f
	TWI_init(&ptr);
    1610:	ce 01       	movw	r24, r28
    1612:	cf 96       	adiw	r24, 0x3f	; 63
    1614:	0e 94 ed 09 	call	0x13da	; 0x13da <TWI_init>

	while(1)
	{
		/* Receive state from MC1 */
		state = UART_recieveByte();
    1618:	0e 94 aa 10 	call	0x2154	; 0x2154 <UART_recieveByte>
    161c:	80 93 71 00 	sts	0x0071, r24
		if(state == 'E');
		{
			/* read value of address 0x0000 from EEPROM */
			EEPROM_readByte(0x0000, &value);
    1620:	20 e7       	ldi	r18, 0x70	; 112
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	b9 01       	movw	r22, r18
    162a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEPROM_readByte>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a0 e2       	ldi	r26, 0x20	; 32
    1634:	b1 e4       	ldi	r27, 0x41	; 65
    1636:	8d ab       	std	Y+53, r24	; 0x35
    1638:	9e ab       	std	Y+54, r25	; 0x36
    163a:	af ab       	std	Y+55, r26	; 0x37
    163c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163e:	6d a9       	ldd	r22, Y+53	; 0x35
    1640:	7e a9       	ldd	r23, Y+54	; 0x36
    1642:	8f a9       	ldd	r24, Y+55	; 0x37
    1644:	98 ad       	ldd	r25, Y+56	; 0x38
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a ef       	ldi	r20, 0xFA	; 250
    164c:	54 e4       	ldi	r21, 0x44	; 68
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	89 ab       	std	Y+49, r24	; 0x31
    1658:	9a ab       	std	Y+50, r25	; 0x32
    165a:	ab ab       	std	Y+51, r26	; 0x33
    165c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    165e:	69 a9       	ldd	r22, Y+49	; 0x31
    1660:	7a a9       	ldd	r23, Y+50	; 0x32
    1662:	8b a9       	ldd	r24, Y+51	; 0x33
    1664:	9c a9       	ldd	r25, Y+52	; 0x34
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	2c f4       	brge	.+10     	; 0x1680 <main+0x9e>
		__ticks = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	98 ab       	std	Y+48, r25	; 0x30
    167c:	8f a7       	std	Y+47, r24	; 0x2f
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <main+0x11c>
	else if (__tmp > 65535)
    1680:	69 a9       	ldd	r22, Y+49	; 0x31
    1682:	7a a9       	ldd	r23, Y+50	; 0x32
    1684:	8b a9       	ldd	r24, Y+51	; 0x33
    1686:	9c a9       	ldd	r25, Y+52	; 0x34
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	4c f5       	brge	.+82     	; 0x16ea <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	6d a9       	ldd	r22, Y+53	; 0x35
    169a:	7e a9       	ldd	r23, Y+54	; 0x36
    169c:	8f a9       	ldd	r24, Y+55	; 0x37
    169e:	98 ad       	ldd	r25, Y+56	; 0x38
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	98 ab       	std	Y+48, r25	; 0x30
    16be:	8f a7       	std	Y+47, r24	; 0x2f
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <main+0xfe>
    16c2:	88 ec       	ldi	r24, 0xC8	; 200
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9e a7       	std	Y+46, r25	; 0x2e
    16c8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    16cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <main+0xec>
    16d2:	9e a7       	std	Y+46, r25	; 0x2e
    16d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	98 ab       	std	Y+48, r25	; 0x30
    16de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e2:	98 a9       	ldd	r25, Y+48	; 0x30
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <main+0xe0>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	69 a9       	ldd	r22, Y+49	; 0x31
    16ec:	7a a9       	ldd	r23, Y+50	; 0x32
    16ee:	8b a9       	ldd	r24, Y+51	; 0x33
    16f0:	9c a9       	ldd	r25, Y+52	; 0x34
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	98 ab       	std	Y+48, r25	; 0x30
    16fc:	8f a7       	std	Y+47, r24	; 0x2f
    16fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1700:	98 a9       	ldd	r25, Y+48	; 0x30
    1702:	9c a7       	std	Y+44, r25	; 0x2c
    1704:	8b a7       	std	Y+43, r24	; 0x2b
    1706:	8b a5       	ldd	r24, Y+43	; 0x2b
    1708:	9c a5       	ldd	r25, Y+44	; 0x2c
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <main+0x128>
    170e:	9c a7       	std	Y+44, r25	; 0x2c
    1710:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			UART_sendByte(value);  /* send value back to MC1 */
    1712:	80 91 70 00 	lds	r24, 0x0070
    1716:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_sendByte>
			state=0;
    171a:	10 92 71 00 	sts	0x0071, r1
		}
		/* To receive saved Password from MC1: */
		if(state == 'S')
    171e:	80 91 71 00 	lds	r24, 0x0071
    1722:	83 35       	cpi	r24, 0x53	; 83
    1724:	09 f0       	breq	.+2      	; 0x1728 <main+0x146>
    1726:	9b c0       	rjmp	.+310    	; 0x185e <main+0x27c>
		{
			for(i=0;i<5;i++)
    1728:	19 ae       	std	Y+57, r1	; 0x39
    172a:	8f c0       	rjmp	.+286    	; 0x184a <main+0x268>
			{
				EEPROM_writeByte(++address, password[i]);
    172c:	80 91 72 00 	lds	r24, 0x0072
    1730:	90 91 73 00 	lds	r25, 0x0073
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	90 93 73 00 	sts	0x0073, r25
    173a:	80 93 72 00 	sts	0x0072, r24
    173e:	40 91 72 00 	lds	r20, 0x0072
    1742:	50 91 73 00 	lds	r21, 0x0073
    1746:	89 ad       	ldd	r24, Y+57	; 0x39
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	ce 01       	movw	r24, r28
    174e:	ca 96       	adiw	r24, 0x3a	; 58
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	20 81       	ld	r18, Z
    1758:	ca 01       	movw	r24, r20
    175a:	62 2f       	mov	r22, r18
    175c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <EEPROM_writeByte>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e2       	ldi	r26, 0x20	; 32
    1766:	b1 e4       	ldi	r27, 0x41	; 65
    1768:	8f a3       	std	Y+39, r24	; 0x27
    176a:	98 a7       	std	Y+40, r25	; 0x28
    176c:	a9 a7       	std	Y+41, r26	; 0x29
    176e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6f a1       	ldd	r22, Y+39	; 0x27
    1772:	78 a5       	ldd	r23, Y+40	; 0x28
    1774:	89 a5       	ldd	r24, Y+41	; 0x29
    1776:	9a a5       	ldd	r25, Y+42	; 0x2a
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8b a3       	std	Y+35, r24	; 0x23
    178a:	9c a3       	std	Y+36, r25	; 0x24
    178c:	ad a3       	std	Y+37, r26	; 0x25
    178e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1790:	6b a1       	ldd	r22, Y+35	; 0x23
    1792:	7c a1       	ldd	r23, Y+36	; 0x24
    1794:	8d a1       	ldd	r24, Y+37	; 0x25
    1796:	9e a1       	ldd	r25, Y+38	; 0x26
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <main+0x1d0>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <main+0x24e>
	else if (__tmp > 65535)
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6f a1       	ldd	r22, Y+39	; 0x27
    17cc:	78 a5       	ldd	r23, Y+40	; 0x28
    17ce:	89 a5       	ldd	r24, Y+41	; 0x29
    17d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a a3       	std	Y+34, r25	; 0x22
    17f0:	89 a3       	std	Y+33, r24	; 0x21
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <main+0x230>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	98 a3       	std	Y+32, r25	; 0x20
    17fa:	8f 8f       	std	Y+31, r24	; 0x1f
    17fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <main+0x21e>
    1804:	98 a3       	std	Y+32, r25	; 0x20
    1806:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	89 a1       	ldd	r24, Y+33	; 0x21
    180a:	9a a1       	ldd	r25, Y+34	; 0x22
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9a a3       	std	Y+34, r25	; 0x22
    1810:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <main+0x212>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6b a1       	ldd	r22, Y+35	; 0x23
    181e:	7c a1       	ldd	r23, Y+36	; 0x24
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	9e 8f       	std	Y+30, r25	; 0x1e
    1836:	8d 8f       	std	Y+29, r24	; 0x1d
    1838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <main+0x25a>
    1840:	9e 8f       	std	Y+30, r25	; 0x1e
    1842:	8d 8f       	std	Y+29, r24	; 0x1d
			state=0;
		}
		/* To receive saved Password from MC1: */
		if(state == 'S')
		{
			for(i=0;i<5;i++)
    1844:	89 ad       	ldd	r24, Y+57	; 0x39
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	89 af       	std	Y+57, r24	; 0x39
    184a:	89 ad       	ldd	r24, Y+57	; 0x39
    184c:	85 30       	cpi	r24, 0x05	; 5
    184e:	08 f4       	brcc	.+2      	; 0x1852 <main+0x270>
    1850:	6d cf       	rjmp	.-294    	; 0x172c <main+0x14a>
			{
				EEPROM_writeByte(++address, password[i]);
				_delay_ms(10);
			}
			state=0;
    1852:	10 92 71 00 	sts	0x0071, r1
			address=0x0000;
    1856:	10 92 73 00 	sts	0x0073, r1
    185a:	10 92 72 00 	sts	0x0072, r1
		}
		/* if password entered correctly reset everything */
		if(state == 'R')
    185e:	80 91 71 00 	lds	r24, 0x0071
    1862:	82 35       	cpi	r24, 0x52	; 82
    1864:	09 f0       	breq	.+2      	; 0x1868 <main+0x286>
    1866:	81 c0       	rjmp	.+258    	; 0x196a <main+0x388>
		{
			/* read password from EEPROM */
			EEPROM_readByte(address, UART_recieveByte());
    1868:	00 91 72 00 	lds	r16, 0x0072
    186c:	10 91 73 00 	lds	r17, 0x0073
    1870:	0e 94 aa 10 	call	0x2154	; 0x2154 <UART_recieveByte>
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 01       	movw	r18, r24
    187a:	c8 01       	movw	r24, r16
    187c:	b9 01       	movw	r22, r18
    187e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEPROM_readByte>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e2       	ldi	r26, 0x20	; 32
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	89 8f       	std	Y+25, r24	; 0x19
    188c:	9a 8f       	std	Y+26, r25	; 0x1a
    188e:	ab 8f       	std	Y+27, r26	; 0x1b
    1890:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	69 8d       	ldd	r22, Y+25	; 0x19
    1894:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8d 8b       	std	Y+21, r24	; 0x15
    18ac:	9e 8b       	std	Y+22, r25	; 0x16
    18ae:	af 8b       	std	Y+23, r26	; 0x17
    18b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <main+0x2f2>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <main+0x370>
	else if (__tmp > 65535)
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	69 8d       	ldd	r22, Y+25	; 0x19
    18ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9c 8b       	std	Y+20, r25	; 0x14
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <main+0x352>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9a 8b       	std	Y+18, r25	; 0x12
    191c:	89 8b       	std	Y+17, r24	; 0x11
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	9a 89       	ldd	r25, Y+18	; 0x12
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <main+0x340>
    1926:	9a 8b       	std	Y+18, r25	; 0x12
    1928:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	9c 89       	ldd	r25, Y+20	; 0x14
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8b 89       	ldd	r24, Y+19	; 0x13
    1936:	9c 89       	ldd	r25, Y+20	; 0x14
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <main+0x334>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6d 89       	ldd	r22, Y+21	; 0x15
    1940:	7e 89       	ldd	r23, Y+22	; 0x16
    1942:	8f 89       	ldd	r24, Y+23	; 0x17
    1944:	98 8d       	ldd	r25, Y+24	; 0x18
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9c 8b       	std	Y+20, r25	; 0x14
    1950:	8b 8b       	std	Y+19, r24	; 0x13
    1952:	8b 89       	ldd	r24, Y+19	; 0x13
    1954:	9c 89       	ldd	r25, Y+20	; 0x14
    1956:	98 8b       	std	Y+16, r25	; 0x10
    1958:	8f 87       	std	Y+15, r24	; 0x0f
    195a:	8f 85       	ldd	r24, Y+15	; 0x0f
    195c:	98 89       	ldd	r25, Y+16	; 0x10
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <main+0x37c>
    1962:	98 8b       	std	Y+16, r25	; 0x10
    1964:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			state=0;
    1966:	10 92 71 00 	sts	0x0071, r1
		}
		/* To send the saved Password to MC1 */
		if(state == '#')
    196a:	80 91 71 00 	lds	r24, 0x0071
    196e:	83 32       	cpi	r24, 0x23	; 35
    1970:	09 f0       	breq	.+2      	; 0x1974 <main+0x392>
    1972:	a9 c0       	rjmp	.+338    	; 0x1ac6 <main+0x4e4>
		{
			for(i=0;i<5;i++)
    1974:	19 ae       	std	Y+57, r1	; 0x39
    1976:	8e c0       	rjmp	.+284    	; 0x1a94 <main+0x4b2>
			{
				EEPROM_writeByte(++address, &password[i]);
    1978:	80 91 72 00 	lds	r24, 0x0072
    197c:	90 91 73 00 	lds	r25, 0x0073
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	90 93 73 00 	sts	0x0073, r25
    1986:	80 93 72 00 	sts	0x0072, r24
    198a:	40 91 72 00 	lds	r20, 0x0072
    198e:	50 91 73 00 	lds	r21, 0x0073
    1992:	89 ad       	ldd	r24, Y+57	; 0x39
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	ce 01       	movw	r24, r28
    199a:	ca 96       	adiw	r24, 0x3a	; 58
    199c:	82 0f       	add	r24, r18
    199e:	93 1f       	adc	r25, r19
    19a0:	28 2f       	mov	r18, r24
    19a2:	ca 01       	movw	r24, r20
    19a4:	62 2f       	mov	r22, r18
    19a6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <EEPROM_writeByte>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a8 ec       	ldi	r26, 0xC8	; 200
    19b0:	b2 e4       	ldi	r27, 0x42	; 66
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	a9 87       	std	Y+9, r26	; 0x09
    19d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <main+0x41a>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <main+0x498>
	else if (__tmp > 65535)
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <main+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <main+0x47a>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <main+0x468>
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <main+0x45c>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <main+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <main+0x4a4>
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
			state=0;
		}
		/* To send the saved Password to MC1 */
		if(state == '#')
		{
			for(i=0;i<5;i++)
    1a8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a90:	8f 5f       	subi	r24, 0xFF	; 255
    1a92:	89 af       	std	Y+57, r24	; 0x39
    1a94:	89 ad       	ldd	r24, Y+57	; 0x39
    1a96:	85 30       	cpi	r24, 0x05	; 5
    1a98:	08 f4       	brcc	.+2      	; 0x1a9c <main+0x4ba>
    1a9a:	6e cf       	rjmp	.-292    	; 0x1978 <main+0x396>
			{
				EEPROM_writeByte(++address, &password[i]);
				_delay_ms(100);
			}
			for(i=0;i<5;i++)
    1a9c:	19 ae       	std	Y+57, r1	; 0x39
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <main+0x4da>
			{
				/* send the saved password to MC1 */
				UART_sendByte(password[i]);
    1aa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	ca 96       	adiw	r24, 0x3a	; 58
    1aaa:	fc 01       	movw	r30, r24
    1aac:	e2 0f       	add	r30, r18
    1aae:	f3 1f       	adc	r31, r19
    1ab0:	80 81       	ld	r24, Z
    1ab2:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_sendByte>
			for(i=0;i<5;i++)
			{
				EEPROM_writeByte(++address, &password[i]);
				_delay_ms(100);
			}
			for(i=0;i<5;i++)
    1ab6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 af       	std	Y+57, r24	; 0x39
    1abc:	89 ad       	ldd	r24, Y+57	; 0x39
    1abe:	85 30       	cpi	r24, 0x05	; 5
    1ac0:	78 f3       	brcs	.-34     	; 0x1aa0 <main+0x4be>
			{
				/* send the saved password to MC1 */
				UART_sendByte(password[i]);
			}
			state=0;
    1ac2:	10 92 71 00 	sts	0x0071, r1
		}
		/* To Open door: */
		if(state == 'O')
    1ac6:	80 91 71 00 	lds	r24, 0x0071
    1aca:	8f 34       	cpi	r24, 0x4F	; 79
    1acc:	11 f4       	brne	.+4      	; 0x1ad2 <main+0x4f0>
		{
			Motor_Delay();
    1ace:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Motor_Delay>
		}
		/* To activate Buzzer */
		if(state == 'B')
    1ad2:	80 91 71 00 	lds	r24, 0x0071
    1ad6:	82 34       	cpi	r24, 0x42	; 66
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <main+0x4fa>
    1ada:	9e cd       	rjmp	.-1220   	; 0x1618 <main+0x36>
		{
            sec++;
    1adc:	80 91 6f 00 	lds	r24, 0x006F
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	80 93 6f 00 	sts	0x006F, r24
			Buzzer_ON();
    1ae6:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_ON>
			while(sec < 60);    // wait 1 minute //
    1aea:	80 91 6f 00 	lds	r24, 0x006F
    1aee:	8c 33       	cpi	r24, 0x3C	; 60
    1af0:	e0 f3       	brcs	.-8      	; 0x1aea <main+0x508>
			TIMER0_stop();
    1af2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <TIMER0_stop>
			Buzzer_OFF();      // disable buzzer //
    1af6:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_OFF>
			sec = 0;
    1afa:	10 92 6f 00 	sts	0x006F, r1
			state = 0;
    1afe:	10 92 71 00 	sts	0x0071, r1
    1b02:	8a cd       	rjmp	.-1260   	; 0x1618 <main+0x36>

00001b04 <TIMER0_OVF>:

/*******************************************************************************
 *                        Interrupt Service Routines                           *
 ******************************************************************************/
ISR(TIMER0_OVF)
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	2f 93       	push	r18
    1b10:	3f 93       	push	r19
    1b12:	4f 93       	push	r20
    1b14:	5f 93       	push	r21
    1b16:	6f 93       	push	r22
    1b18:	7f 93       	push	r23
    1b1a:	8f 93       	push	r24
    1b1c:	9f 93       	push	r25
    1b1e:	af 93       	push	r26
    1b20:	bf 93       	push	r27
    1b22:	ef 93       	push	r30
    1b24:	ff 93       	push	r31
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ovf_Ptr != NULL_PTR)
    1b2e:	80 91 74 00 	lds	r24, 0x0074
    1b32:	90 91 75 00 	lds	r25, 0x0075
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <TIMER0_OVF+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer0_ovf_Ptr)();
    1b3a:	e0 91 74 00 	lds	r30, 0x0074
    1b3e:	f0 91 75 00 	lds	r31, 0x0075
    1b42:	09 95       	icall
	}
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	ff 91       	pop	r31
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	7f 91       	pop	r23
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <TIMER2_OVF>:


ISR(TIMER2_OVF)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	4f 93       	push	r20
    1b7a:	5f 93       	push	r21
    1b7c:	6f 93       	push	r22
    1b7e:	7f 93       	push	r23
    1b80:	8f 93       	push	r24
    1b82:	9f 93       	push	r25
    1b84:	af 93       	push	r26
    1b86:	bf 93       	push	r27
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_ovf_Ptr != NULL_PTR)
    1b94:	80 91 78 00 	lds	r24, 0x0078
    1b98:	90 91 79 00 	lds	r25, 0x0079
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	29 f0       	breq	.+10     	; 0x1baa <TIMER2_OVF+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer2_ovf_Ptr)();
    1ba0:	e0 91 78 00 	lds	r30, 0x0078
    1ba4:	f0 91 79 00 	lds	r31, 0x0079
    1ba8:	09 95       	icall
	}
}
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	0f 90       	pop	r0
    1bcc:	1f 90       	pop	r1
    1bce:	18 95       	reti

00001bd0 <TIMER0_COMP>:

ISR(TIMER0_COMP)
{
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	6f 93       	push	r22
    1be4:	7f 93       	push	r23
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	af 93       	push	r26
    1bec:	bf 93       	push	r27
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_comp_Ptr != NULL_PTR)
    1bfa:	80 91 76 00 	lds	r24, 0x0076
    1bfe:	90 91 77 00 	lds	r25, 0x0077
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	29 f0       	breq	.+10     	; 0x1c10 <TIMER0_COMP+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer0_comp_Ptr)();
    1c06:	e0 91 76 00 	lds	r30, 0x0076
    1c0a:	f0 91 77 00 	lds	r31, 0x0077
    1c0e:	09 95       	icall
	}
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	ff 91       	pop	r31
    1c16:	ef 91       	pop	r30
    1c18:	bf 91       	pop	r27
    1c1a:	af 91       	pop	r26
    1c1c:	9f 91       	pop	r25
    1c1e:	8f 91       	pop	r24
    1c20:	7f 91       	pop	r23
    1c22:	6f 91       	pop	r22
    1c24:	5f 91       	pop	r21
    1c26:	4f 91       	pop	r20
    1c28:	3f 91       	pop	r19
    1c2a:	2f 91       	pop	r18
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	0f 90       	pop	r0
    1c32:	1f 90       	pop	r1
    1c34:	18 95       	reti

00001c36 <TIMER2_COMP>:


ISR(TIMER2_COMP)
{
    1c36:	1f 92       	push	r1
    1c38:	0f 92       	push	r0
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	0f 92       	push	r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	4f 93       	push	r20
    1c46:	5f 93       	push	r21
    1c48:	6f 93       	push	r22
    1c4a:	7f 93       	push	r23
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	ef 93       	push	r30
    1c56:	ff 93       	push	r31
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_comp_Ptr != NULL_PTR)
    1c60:	80 91 7a 00 	lds	r24, 0x007A
    1c64:	90 91 7b 00 	lds	r25, 0x007B
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	29 f0       	breq	.+10     	; 0x1c76 <TIMER2_COMP+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer2_comp_Ptr)();
    1c6c:	e0 91 7a 00 	lds	r30, 0x007A
    1c70:	f0 91 7b 00 	lds	r31, 0x007B
    1c74:	09 95       	icall
	}
}
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	bf 91       	pop	r27
    1c80:	af 91       	pop	r26
    1c82:	9f 91       	pop	r25
    1c84:	8f 91       	pop	r24
    1c86:	7f 91       	pop	r23
    1c88:	6f 91       	pop	r22
    1c8a:	5f 91       	pop	r21
    1c8c:	4f 91       	pop	r20
    1c8e:	3f 91       	pop	r19
    1c90:	2f 91       	pop	r18
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <TIMER0_OVF_setCallBack>:

/*******************************************************************************
 *                         Call-back  Functions Definitions                    *
 ******************************************************************************/
void TIMER0_OVF_setCallBack(void(*a_ptr)(void))
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <TIMER0_OVF_setCallBack+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	Timer0_ovf_Ptr= a_ptr;
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	90 93 75 00 	sts	0x0075, r25
    1cb2:	80 93 74 00 	sts	0x0074, r24
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <TIMER2_OVF_setCallBack>:

void TIMER2_OVF_setCallBack(void(*a_ptr)(void))
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <TIMER2_OVF_setCallBack+0x6>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	Timer2_ovf_Ptr= a_ptr;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	90 93 79 00 	sts	0x0079, r25
    1cd6:	80 93 78 00 	sts	0x0078, r24
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <TIMER0_COMP_setCallBack>:
void TIMER0_COMP_setCallBack(void(*a_ptr)(void))
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <TIMER0_COMP_setCallBack+0x6>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	Timer0_comp_Ptr= a_ptr;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	90 93 77 00 	sts	0x0077, r25
    1cfa:	80 93 76 00 	sts	0x0076, r24
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TIMER2_COMP_setCallBack>:



void TIMER2_COMP_setCallBack(void(*a_ptr)(void))
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <TIMER2_COMP_setCallBack+0x6>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	Timer2_comp_Ptr= a_ptr;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	90 93 7b 00 	sts	0x007B, r25
    1d1e:	80 93 7a 00 	sts	0x007A, r24
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <TIMER0_init>:
 *******************************************************************************/



void TIMER0_init(TIMER_ConfigType *Config_Ptr)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <TIMER0_init+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	if ((Config_Ptr) -> mode == NORMAL)
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	88 23       	and	r24, r24
    1d42:	29 f5       	brne	.+74     	; 0x1d8e <TIMER0_init+0x62>
	{
		/* To choose pre-scale */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    1d44:	a3 e5       	ldi	r26, 0x53	; 83
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e3 e5       	ldi	r30, 0x53	; 83
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	98 2f       	mov	r25, r24
    1d50:	98 7f       	andi	r25, 0xF8	; 248
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	80 81       	ld	r24, Z
    1d58:	89 2b       	or	r24, r25
    1d5a:	8c 93       	st	X, r24
		/* Normal Mode */
		CLEAR_BIT(TCCR0,WGM00);
    1d5c:	a3 e5       	ldi	r26, 0x53	; 83
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e3 e5       	ldi	r30, 0x53	; 83
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8f 7b       	andi	r24, 0xBF	; 191
    1d68:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    1d6a:	a3 e5       	ldi	r26, 0x53	; 83
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e3 e5       	ldi	r30, 0x53	; 83
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	87 7f       	andi	r24, 0xF7	; 247
    1d76:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    1d78:	a2 e5       	ldi	r26, 0x52	; 82
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d80:	83 81       	ldd	r24, Z+3	; 0x03
    1d82:	8c 93       	st	X, r24
		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    1d84:	e9 e5       	ldi	r30, 0x59	; 89
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	80 83       	st	Z, r24
    1d8c:	7a c0       	rjmp	.+244    	; 0x1e82 <TIMER0_init+0x156>
	}
	else if (Config_Ptr -> mode == PWM)
    1d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d90:	fa 81       	ldd	r31, Y+2	; 0x02
    1d92:	81 81       	ldd	r24, Z+1	; 0x01
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	c9 f5       	brne	.+114    	; 0x1e0a <TIMER0_init+0xde>
	{
		/* To choose pre-scale */
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    1d98:	a3 e5       	ldi	r26, 0x53	; 83
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e3 e5       	ldi	r30, 0x53	; 83
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	98 2f       	mov	r25, r24
    1da4:	98 7f       	andi	r25, 0xF8	; 248
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	80 81       	ld	r24, Z
    1dac:	89 2b       	or	r24, r25
    1dae:	8c 93       	st	X, r24
		/* PWM Mode */
		CLEAR_BIT(TCCR0,WGM00);
    1db0:	a3 e5       	ldi	r26, 0x53	; 83
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e3 e5       	ldi	r30, 0x53	; 83
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7b       	andi	r24, 0xBF	; 191
    1dbc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1dbe:	a3 e5       	ldi	r26, 0x53	; 83
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e3 e5       	ldi	r30, 0x53	; 83
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 60       	ori	r24, 0x08	; 8
    1dca:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    1dcc:	a2 e5       	ldi	r26, 0x52	; 82
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd4:	83 81       	ldd	r24, Z+3	; 0x03
    1dd6:	8c 93       	st	X, r24
		 *  Clear OC0 on compare match when up-counting. Set OC0 on compare
            match when downcounting.
		 *  Set OC0 on compare match when up-counting. Clear OC0 on compare
            match when downcounting.
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    1dd8:	a3 e5       	ldi	r26, 0x53	; 83
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e3 e5       	ldi	r30, 0x53	; 83
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	2f 7c       	andi	r18, 0xCF	; 207
    1de6:	e9 81       	ldd	r30, Y+1	; 0x01
    1de8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	82 95       	swap	r24
    1df2:	92 95       	swap	r25
    1df4:	90 7f       	andi	r25, 0xF0	; 240
    1df6:	98 27       	eor	r25, r24
    1df8:	80 7f       	andi	r24, 0xF0	; 240
    1dfa:	98 27       	eor	r25, r24
    1dfc:	82 2b       	or	r24, r18
    1dfe:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    1e00:	e9 e5       	ldi	r30, 0x59	; 89
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	80 83       	st	Z, r24
    1e08:	3c c0       	rjmp	.+120    	; 0x1e82 <TIMER0_init+0x156>
	}
	else if (Config_Ptr -> mode == CTC)
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	81 81       	ldd	r24, Z+1	; 0x01
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	b9 f5       	brne	.+110    	; 0x1e82 <TIMER0_init+0x156>
	{
		/* To choose pre-scale */
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    1e14:	a3 e5       	ldi	r26, 0x53	; 83
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e3 e5       	ldi	r30, 0x53	; 83
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	98 2f       	mov	r25, r24
    1e20:	98 7f       	andi	r25, 0xF8	; 248
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	80 81       	ld	r24, Z
    1e28:	89 2b       	or	r24, r25
    1e2a:	8c 93       	st	X, r24
		/* COMPARE Mode */
		SET_BIT(TCCR0,WGM01);
    1e2c:	a3 e5       	ldi	r26, 0x53	; 83
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e3 e5       	ldi	r30, 0x53	; 83
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	88 60       	ori	r24, 0x08	; 8
    1e38:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    1e3a:	a2 e5       	ldi	r26, 0x52	; 82
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	83 81       	ldd	r24, Z+3	; 0x03
    1e44:	8c 93       	st	X, r24

		 *  Clear OC0 on compare match

		 *  Set OC0 on compare match
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	2f 7c       	andi	r18, 0xCF	; 207
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	82 95       	swap	r24
    1e60:	92 95       	swap	r25
    1e62:	90 7f       	andi	r25, 0xF0	; 240
    1e64:	98 27       	eor	r25, r24
    1e66:	80 7f       	andi	r24, 0xF0	; 240
    1e68:	98 27       	eor	r25, r24
    1e6a:	82 2b       	or	r24, r18
    1e6c:	8c 93       	st	X, r24

		/* To choose compare value */
		OCR0= Config_Ptr -> compValue;
    1e6e:	ac e5       	ldi	r26, 0x5C	; 92
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	84 81       	ldd	r24, Z+4	; 0x04
    1e78:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    1e7a:	e9 e5       	ldi	r30, 0x59	; 89
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	80 83       	st	Z, r24
	}
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <TIMER0_stop>:

void TIMER0_stop()
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	/* Stop the Timer */
	TCCR0 = 0;
    1e94:	e3 e5       	ldi	r30, 0x53	; 83
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	10 82       	st	Z, r1
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <TIMER2_init>:


void TIMER2_init(TIMER_ConfigType *Config_Ptr)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <TIMER2_init+0x6>
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr -> mode == NORMAL)
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	81 81       	ldd	r24, Z+1	; 0x01
    1eb4:	88 23       	and	r24, r24
    1eb6:	29 f5       	brne	.+74     	; 0x1f02 <TIMER2_init+0x62>
	{
		/* To choose pre-scale */
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    1eb8:	a5 e4       	ldi	r26, 0x45	; 69
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e5 e4       	ldi	r30, 0x45	; 69
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	98 2f       	mov	r25, r24
    1ec4:	98 7f       	andi	r25, 0xF8	; 248
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 2b       	or	r24, r25
    1ece:	8c 93       	st	X, r24
		/* Normal Mode */
		CLEAR_BIT(TCCR2,WGM20);
    1ed0:	a5 e4       	ldi	r26, 0x45	; 69
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e4       	ldi	r30, 0x45	; 69
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 7b       	andi	r24, 0xBF	; 191
    1edc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,WGM21);
    1ede:	a5 e4       	ldi	r26, 0x45	; 69
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e4       	ldi	r30, 0x45	; 69
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	87 7f       	andi	r24, 0xF7	; 247
    1eea:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    1eec:	a4 e4       	ldi	r26, 0x44	; 68
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	8c 93       	st	X, r24
		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    1ef8:	e9 e5       	ldi	r30, 0x59	; 89
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 e4       	ldi	r24, 0x40	; 64
    1efe:	80 83       	st	Z, r24
    1f00:	7a c0       	rjmp	.+244    	; 0x1ff6 <TIMER2_init+0x156>
	}
	else if (Config_Ptr -> mode == PWM)
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	c9 f5       	brne	.+114    	; 0x1f7e <TIMER2_init+0xde>
	{
		/* To choose pre-scale */
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    1f0c:	a5 e4       	ldi	r26, 0x45	; 69
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e4       	ldi	r30, 0x45	; 69
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	98 2f       	mov	r25, r24
    1f18:	98 7f       	andi	r25, 0xF8	; 248
    1f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1e:	80 81       	ld	r24, Z
    1f20:	89 2b       	or	r24, r25
    1f22:	8c 93       	st	X, r24
		/* PWM Mode */
		CLEAR_BIT(TCCR2,WGM20);
    1f24:	a5 e4       	ldi	r26, 0x45	; 69
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e4       	ldi	r30, 0x45	; 69
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 7b       	andi	r24, 0xBF	; 191
    1f30:	8c 93       	st	X, r24
		SET_BIT(TCCR2,WGM21);
    1f32:	a5 e4       	ldi	r26, 0x45	; 69
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e4       	ldi	r30, 0x45	; 69
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 60       	ori	r24, 0x08	; 8
    1f3e:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    1f40:	a4 e4       	ldi	r26, 0x44	; 68
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e9 81       	ldd	r30, Y+1	; 0x01
    1f46:	fa 81       	ldd	r31, Y+2	; 0x02
    1f48:	83 81       	ldd	r24, Z+3	; 0x03
    1f4a:	8c 93       	st	X, r24
            match when downcounting.

		 *  Set OC0 on compare match when up-counting. Clear OC0 on compare
            match when downcounting.
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    1f4c:	a5 e4       	ldi	r26, 0x45	; 69
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e4       	ldi	r30, 0x45	; 69
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	2f 7c       	andi	r18, 0xCF	; 207
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	82 95       	swap	r24
    1f66:	92 95       	swap	r25
    1f68:	90 7f       	andi	r25, 0xF0	; 240
    1f6a:	98 27       	eor	r25, r24
    1f6c:	80 7f       	andi	r24, 0xF0	; 240
    1f6e:	98 27       	eor	r25, r24
    1f70:	82 2b       	or	r24, r18
    1f72:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    1f74:	e9 e5       	ldi	r30, 0x59	; 89
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 e4       	ldi	r24, 0x40	; 64
    1f7a:	80 83       	st	Z, r24
    1f7c:	3c c0       	rjmp	.+120    	; 0x1ff6 <TIMER2_init+0x156>
	}
	else if (Config_Ptr -> mode == CTC)
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	81 81       	ldd	r24, Z+1	; 0x01
    1f84:	82 30       	cpi	r24, 0x02	; 2
    1f86:	b9 f5       	brne	.+110    	; 0x1ff6 <TIMER2_init+0x156>
	{
		/* COMPARE Mode */
		SET_BIT(TCCR2,WGM21);
    1f88:	a5 e4       	ldi	r26, 0x45	; 69
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e5 e4       	ldi	r30, 0x45	; 69
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	8c 93       	st	X, r24
		/* To choose pre-scale */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    1f96:	a5 e4       	ldi	r26, 0x45	; 69
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e5 e4       	ldi	r30, 0x45	; 69
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	98 7f       	andi	r25, 0xF8	; 248
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	80 81       	ld	r24, Z
    1faa:	89 2b       	or	r24, r25
    1fac:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    1fae:	a4 e4       	ldi	r26, 0x44	; 68
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	83 81       	ldd	r24, Z+3	; 0x03
    1fb8:	8c 93       	st	X, r24

		 *  Clear OC0 on compare match

		 *  Set OC0 on compare match
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    1fba:	a5 e4       	ldi	r26, 0x45	; 69
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e5 e4       	ldi	r30, 0x45	; 69
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	2f 7c       	andi	r18, 0xCF	; 207
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	82 95       	swap	r24
    1fd4:	92 95       	swap	r25
    1fd6:	90 7f       	andi	r25, 0xF0	; 240
    1fd8:	98 27       	eor	r25, r24
    1fda:	80 7f       	andi	r24, 0xF0	; 240
    1fdc:	98 27       	eor	r25, r24
    1fde:	82 2b       	or	r24, r18
    1fe0:	8c 93       	st	X, r24

		/* To choose compare value */
		OCR2= Config_Ptr -> compValue;
    1fe2:	a3 e4       	ldi	r26, 0x43	; 67
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	84 81       	ldd	r24, Z+4	; 0x04
    1fec:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    1fee:	e9 e5       	ldi	r30, 0x59	; 89
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 e4       	ldi	r24, 0x40	; 64
    1ff4:	80 83       	st	Z, r24
	}
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <TIMER2_stop>:

void TIMER2_stop(void)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	/* Stop the Timer */
	TCCR2=0;
    2008:	e5 e4       	ldi	r30, 0x45	; 69
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	10 82       	st	Z, r1
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,UART_configType *config_ptr)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	28 97       	sbiw	r28, 0x08	; 8
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	6b 83       	std	Y+3, r22	; 0x03
    202a:	7c 83       	std	Y+4, r23	; 0x04
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	58 87       	std	Y+8, r21	; 0x08
    2032:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2034:	1a 82       	std	Y+2, r1	; 0x02
    2036:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2038:	eb e2       	ldi	r30, 0x2B	; 43
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2040:	ea e2       	ldi	r30, 0x2A	; 42
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	88 e1       	ldi	r24, 0x18	; 24
    2046:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (UCSRC&0xCF)|((config_ptr->parityType)<<4);
    2048:	a0 e4       	ldi	r26, 0x40	; 64
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e0 e4       	ldi	r30, 0x40	; 64
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	28 2f       	mov	r18, r24
    2054:	2f 7c       	andi	r18, 0xCF	; 207
    2056:	ef 81       	ldd	r30, Y+7	; 0x07
    2058:	f8 85       	ldd	r31, Y+8	; 0x08
    205a:	84 81       	ldd	r24, Z+4	; 0x04
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	82 95       	swap	r24
    2062:	92 95       	swap	r25
    2064:	90 7f       	andi	r25, 0xF0	; 240
    2066:	98 27       	eor	r25, r24
    2068:	80 7f       	andi	r24, 0xF0	; 240
    206a:	98 27       	eor	r25, r24
    206c:	82 2b       	or	r24, r18
    206e:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((config_ptr->stopBit)<<3);
    2070:	a0 e4       	ldi	r26, 0x40	; 64
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e0 e4       	ldi	r30, 0x40	; 64
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	28 2f       	mov	r18, r24
    207c:	27 7f       	andi	r18, 0xF7	; 247
    207e:	ef 81       	ldd	r30, Y+7	; 0x07
    2080:	f8 85       	ldd	r31, Y+8	; 0x08
    2082:	85 81       	ldd	r24, Z+5	; 0x05
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	82 2b       	or	r24, r18
    2096:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((config_ptr->dataSize)<<1);
    2098:	a0 e4       	ldi	r26, 0x40	; 64
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e0 e4       	ldi	r30, 0x40	; 64
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	28 2f       	mov	r18, r24
    20a4:	29 7f       	andi	r18, 0xF9	; 249
    20a6:	ef 81       	ldd	r30, Y+7	; 0x07
    20a8:	f8 85       	ldd	r31, Y+8	; 0x08
    20aa:	86 81       	ldd	r24, Z+6	; 0x06
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 2b       	or	r24, r18
    20b6:	8c 93       	st	X, r24
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    20b8:	e0 e4       	ldi	r30, 0x40	; 64
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	86 e8       	ldi	r24, 0x86	; 134
    20be:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	ad 81       	ldd	r26, Y+5	; 0x05
    20c6:	be 81       	ldd	r27, Y+6	; 0x06
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	aa 1f       	adc	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	9c 01       	movw	r18, r24
    20e2:	ad 01       	movw	r20, r26
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	92 e1       	ldi	r25, 0x12	; 18
    20e8:	aa e7       	ldi	r26, 0x7A	; 122
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 25 11 	call	0x224a	; 0x224a <__udivmodsi4>
    20f4:	da 01       	movw	r26, r20
    20f6:	c9 01       	movw	r24, r18
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    20fe:	e0 e4       	ldi	r30, 0x40	; 64
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	89 2f       	mov	r24, r25
    2108:	99 27       	eor	r25, r25
    210a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    210c:	e9 e2       	ldi	r30, 0x29	; 41
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	80 83       	st	Z, r24
}
    2114:	28 96       	adiw	r28, 0x08	; 8
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2132:	eb e2       	ldi	r30, 0x2B	; 43
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	80 72       	andi	r24, 0x20	; 32
    213e:	90 70       	andi	r25, 0x00	; 0
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	b9 f3       	breq	.-18     	; 0x2132 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2144:	ec e2       	ldi	r30, 0x2C	; 44
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    215c:	eb e2       	ldi	r30, 0x2B	; 43
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	88 23       	and	r24, r24
    2164:	dc f7       	brge	.-10     	; 0x215c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2166:	ec e2       	ldi	r30, 0x2C	; 44
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
}
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <UART_sendString+0x6>
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	9b 83       	std	Y+3, r25	; 0x03
    2180:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	fc 01       	movw	r30, r24
    2192:	e2 0f       	add	r30, r18
    2194:	f3 1f       	adc	r31, r19
    2196:	80 81       	ld	r24, Z
    2198:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_sendByte>
		i++;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	80 81       	ld	r24, Z
    21b4:	88 23       	and	r24, r24
    21b6:	39 f7       	brne	.-50     	; 0x2186 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <UART_receiveString+0xa>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9b 83       	std	Y+3, r25	; 0x03
    21d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21d8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	8c 01       	movw	r16, r24
    21e6:	02 0f       	add	r16, r18
    21e8:	13 1f       	adc	r17, r19
    21ea:	0e 94 aa 10 	call	0x2154	; 0x2154 <UART_recieveByte>
    21ee:	f8 01       	movw	r30, r16
    21f0:	80 83       	st	Z, r24
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	8c 01       	movw	r16, r24
    2206:	02 0f       	add	r16, r18
    2208:	13 1f       	adc	r17, r19
    220a:	0e 94 aa 10 	call	0x2154	; 0x2154 <UART_recieveByte>
    220e:	f8 01       	movw	r30, r16
    2210:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	fc 01       	movw	r30, r24
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	80 81       	ld	r24, Z
    2224:	83 32       	cpi	r24, 0x23	; 35
    2226:	31 f7       	brne	.-52     	; 0x21f4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	9b 81       	ldd	r25, Y+3	; 0x03
    2232:	fc 01       	movw	r30, r24
    2234:	e2 0f       	add	r30, r18
    2236:	f3 1f       	adc	r31, r19
    2238:	10 82       	st	Z, r1
}
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	08 95       	ret

0000224a <__udivmodsi4>:
    224a:	a1 e2       	ldi	r26, 0x21	; 33
    224c:	1a 2e       	mov	r1, r26
    224e:	aa 1b       	sub	r26, r26
    2250:	bb 1b       	sub	r27, r27
    2252:	fd 01       	movw	r30, r26
    2254:	0d c0       	rjmp	.+26     	; 0x2270 <__udivmodsi4_ep>

00002256 <__udivmodsi4_loop>:
    2256:	aa 1f       	adc	r26, r26
    2258:	bb 1f       	adc	r27, r27
    225a:	ee 1f       	adc	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	a2 17       	cp	r26, r18
    2260:	b3 07       	cpc	r27, r19
    2262:	e4 07       	cpc	r30, r20
    2264:	f5 07       	cpc	r31, r21
    2266:	20 f0       	brcs	.+8      	; 0x2270 <__udivmodsi4_ep>
    2268:	a2 1b       	sub	r26, r18
    226a:	b3 0b       	sbc	r27, r19
    226c:	e4 0b       	sbc	r30, r20
    226e:	f5 0b       	sbc	r31, r21

00002270 <__udivmodsi4_ep>:
    2270:	66 1f       	adc	r22, r22
    2272:	77 1f       	adc	r23, r23
    2274:	88 1f       	adc	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	1a 94       	dec	r1
    227a:	69 f7       	brne	.-38     	; 0x2256 <__udivmodsi4_loop>
    227c:	60 95       	com	r22
    227e:	70 95       	com	r23
    2280:	80 95       	com	r24
    2282:	90 95       	com	r25
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	bd 01       	movw	r22, r26
    228a:	cf 01       	movw	r24, r30
    228c:	08 95       	ret

0000228e <__prologue_saves__>:
    228e:	2f 92       	push	r2
    2290:	3f 92       	push	r3
    2292:	4f 92       	push	r4
    2294:	5f 92       	push	r5
    2296:	6f 92       	push	r6
    2298:	7f 92       	push	r7
    229a:	8f 92       	push	r8
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	ca 1b       	sub	r28, r26
    22b8:	db 0b       	sbc	r29, r27
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	09 94       	ijmp

000022c6 <__epilogue_restores__>:
    22c6:	2a 88       	ldd	r2, Y+18	; 0x12
    22c8:	39 88       	ldd	r3, Y+17	; 0x11
    22ca:	48 88       	ldd	r4, Y+16	; 0x10
    22cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    22d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d8:	b9 84       	ldd	r11, Y+9	; 0x09
    22da:	c8 84       	ldd	r12, Y+8	; 0x08
    22dc:	df 80       	ldd	r13, Y+7	; 0x07
    22de:	ee 80       	ldd	r14, Y+6	; 0x06
    22e0:	fd 80       	ldd	r15, Y+5	; 0x05
    22e2:	0c 81       	ldd	r16, Y+4	; 0x04
    22e4:	1b 81       	ldd	r17, Y+3	; 0x03
    22e6:	aa 81       	ldd	r26, Y+2	; 0x02
    22e8:	b9 81       	ldd	r27, Y+1	; 0x01
    22ea:	ce 0f       	add	r28, r30
    22ec:	d1 1d       	adc	r29, r1
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	ed 01       	movw	r28, r26
    22fa:	08 95       	ret

000022fc <_exit>:
    22fc:	f8 94       	cli

000022fe <__stop_program>:
    22fe:	ff cf       	rjmp	.-2      	; 0x22fe <__stop_program>
