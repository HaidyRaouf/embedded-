
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  0000367e  00003712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080020c  0080020c  000038be  2**0
                  ALLOC
  3 .stab         0000330c  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013c2  00000000  00000000  00006bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000080ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 0b 	call	0x16ee	; 0x16ee <main>
      8a:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timerCallBack>:

/******************************************************************************/

TIMER_ConfigType Config_Ptr={F_CPU_256,CTC,DISCONNECTED,255,0};
void timerCallBack(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	tick++;
     b4e:	80 91 12 02 	lds	r24, 0x0212
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 12 02 	sts	0x0212, r24
		if(tick < 122)
     b58:	80 91 12 02 	lds	r24, 0x0212
     b5c:	8a 37       	cpi	r24, 0x7A	; 122
     b5e:	38 f4       	brcc	.+14     	; 0xb6e <timerCallBack+0x28>
		{
			tick=0;
     b60:	10 92 12 02 	sts	0x0212, r1
			sec++;
     b64:	80 91 13 02 	lds	r24, 0x0213
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	80 93 13 02 	sts	0x0213, r24
		}
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <Menu>:
void Menu()
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2e 97       	sbiw	r28, 0x0e	; 14
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     b88:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
	/*show Options available */
	LCD_displayStringRowColumn(0, 0, "+: Open Door");
     b8c:	20 e6       	ldi	r18, 0x60	; 96
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	a9 01       	movw	r20, r18
     b96:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
     b9a:	2d e6       	ldi	r18, 0x6D	; 109
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	a9 01       	movw	r20, r18
     ba4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	aa ef       	ldi	r26, 0xFA	; 250
     bae:	b3 e4       	ldi	r27, 0x43	; 67
     bb0:	8b 87       	std	Y+11, r24	; 0x0b
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	ad 87       	std	Y+13, r26	; 0x0d
     bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bba:	7c 85       	ldd	r23, Y+12	; 0x0c
     bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	4a ef       	ldi	r20, 0xFA	; 250
     bc6:	54 e4       	ldi	r21, 0x44	; 68
     bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8f 83       	std	Y+7, r24	; 0x07
     bd2:	98 87       	std	Y+8, r25	; 0x08
     bd4:	a9 87       	std	Y+9, r26	; 0x09
     bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bd8:	6f 81       	ldd	r22, Y+7	; 0x07
     bda:	78 85       	ldd	r23, Y+8	; 0x08
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e8       	ldi	r20, 0x80	; 128
     be6:	5f e3       	ldi	r21, 0x3F	; 63
     be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bec:	88 23       	and	r24, r24
     bee:	2c f4       	brge	.+10     	; 0xbfa <Menu+0x86>
		__ticks = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9e 83       	std	Y+6, r25	; 0x06
     bf6:	8d 83       	std	Y+5, r24	; 0x05
     bf8:	3f c0       	rjmp	.+126    	; 0xc78 <Menu+0x104>
	else if (__tmp > 65535)
     bfa:	6f 81       	ldd	r22, Y+7	; 0x07
     bfc:	78 85       	ldd	r23, Y+8	; 0x08
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	3f ef       	ldi	r19, 0xFF	; 255
     c06:	4f e7       	ldi	r20, 0x7F	; 127
     c08:	57 e4       	ldi	r21, 0x47	; 71
     c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0e:	18 16       	cp	r1, r24
     c10:	4c f5       	brge	.+82     	; 0xc64 <Menu+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	6b 85       	ldd	r22, Y+11	; 0x0b
     c14:	7c 85       	ldd	r23, Y+12	; 0x0c
     c16:	8d 85       	ldd	r24, Y+13	; 0x0d
     c18:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e2       	ldi	r20, 0x20	; 32
     c20:	51 e4       	ldi	r21, 0x41	; 65
     c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <Menu+0xe6>
     c3c:	88 ec       	ldi	r24, 0xC8	; 200
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9c 83       	std	Y+4, r25	; 0x04
     c42:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <Menu+0xd4>
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	69 f7       	brne	.-38     	; 0xc3c <Menu+0xc8>
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <Menu+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c64:	6f 81       	ldd	r22, Y+7	; 0x07
     c66:	78 85       	ldd	r23, Y+8	; 0x08
     c68:	89 85       	ldd	r24, Y+9	; 0x09
     c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	9e 83       	std	Y+6, r25	; 0x06
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	9e 81       	ldd	r25, Y+6	; 0x06
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <Menu+0x110>
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
     c8c:	2e 96       	adiw	r28, 0x0e	; 14
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <get_password>:
void get_password()
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	2e 97       	sbiw	r28, 0x0e	; 14
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
	for(i=0;i<PASSWORD_SIZE;i++)
     cb6:	10 92 14 02 	sts	0x0214, r1
     cba:	8e c0       	rjmp	.+284    	; 0xdd8 <get_password+0x13a>
	{
		if (KEYPAD_getPressedKey() < 10)
     cbc:	0e 94 48 11 	call	0x2290	; 0x2290 <KEYPAD_getPressedKey>
     cc0:	8a 30       	cpi	r24, 0x0A	; 10
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <get_password+0x28>
     cc4:	84 c0       	rjmp	.+264    	; 0xdce <get_password+0x130>
		{
			password[i]= KEYPAD_getPressedKey();
     cc6:	80 91 14 02 	lds	r24, 0x0214
     cca:	08 2f       	mov	r16, r24
     ccc:	10 e0       	ldi	r17, 0x00	; 0
     cce:	0e 94 48 11 	call	0x2290	; 0x2290 <KEYPAD_getPressedKey>
     cd2:	f8 01       	movw	r30, r16
     cd4:	e2 5e       	subi	r30, 0xE2	; 226
     cd6:	fd 4f       	sbci	r31, 0xFD	; 253
     cd8:	80 83       	st	Z, r24
			LCD_displayCharacter('*');     /* display '*' for every entered number */
     cda:	8a e2       	ldi	r24, 0x2A	; 42
     cdc:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_displayCharacter>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	aa ef       	ldi	r26, 0xFA	; 250
     ce6:	b3 e4       	ldi	r27, 0x43	; 67
     ce8:	8b 87       	std	Y+11, r24	; 0x0b
     cea:	9c 87       	std	Y+12, r25	; 0x0c
     cec:	ad 87       	std	Y+13, r26	; 0x0d
     cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8f 83       	std	Y+7, r24	; 0x07
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	a9 87       	std	Y+9, r26	; 0x09
     d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	2c f4       	brge	.+10     	; 0xd32 <get_password+0x94>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <get_password+0x112>
	else if (__tmp > 65535)
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d46:	18 16       	cp	r1, r24
     d48:	4c f5       	brge	.+82     	; 0xd9c <get_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <get_password+0xf4>
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <get_password+0xe2>
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f7       	brne	.-38     	; 0xd74 <get_password+0xd6>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <get_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <get_password+0x11e>
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			passCount++;
     dc4:	80 91 0f 02 	lds	r24, 0x020F
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	80 93 0f 02 	sts	0x020F, r24
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
	_delay_ms(500);
}
void get_password()
{
	for(i=0;i<PASSWORD_SIZE;i++)
     dce:	80 91 14 02 	lds	r24, 0x0214
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 14 02 	sts	0x0214, r24
     dd8:	80 91 14 02 	lds	r24, 0x0214
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	08 f4       	brcc	.+2      	; 0xde2 <get_password+0x144>
     de0:	6d cf       	rjmp	.-294    	; 0xcbc <get_password+0x1e>
			LCD_displayCharacter('*');     /* display '*' for every entered number */
			_delay_ms(500);
			passCount++;
		}
	}
}
     de2:	2e 96       	adiw	r28, 0x0e	; 14
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <reset_changes>:
void reset_changes()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     e00:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
	first_time = passCount = re_enter = reset = flag = i = option = warning = 0;
     e04:	10 92 0d 02 	sts	0x020D, r1
     e08:	80 91 0d 02 	lds	r24, 0x020D
     e0c:	80 93 11 02 	sts	0x0211, r24
     e10:	80 91 11 02 	lds	r24, 0x0211
     e14:	80 93 14 02 	sts	0x0214, r24
     e18:	80 91 14 02 	lds	r24, 0x0214
     e1c:	80 93 15 02 	sts	0x0215, r24
     e20:	80 91 15 02 	lds	r24, 0x0215
     e24:	80 93 10 02 	sts	0x0210, r24
     e28:	80 91 10 02 	lds	r24, 0x0210
     e2c:	80 93 0e 02 	sts	0x020E, r24
     e30:	80 91 0e 02 	lds	r24, 0x020E
     e34:	80 93 0f 02 	sts	0x020F, r24
     e38:	80 91 0f 02 	lds	r24, 0x020F
     e3c:	80 93 0c 02 	sts	0x020C, r24
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <check_password>:
void check_password()
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
	for(i = 0; i < PASSWORD_SIZE; i++)
     e5a:	10 92 14 02 	sts	0x0214, r1
     e5e:	2e c1       	rjmp	.+604    	; 0x10bc <check_password+0x276>
	{
		if(checkpass[i] != password[i] )
     e60:	80 91 14 02 	lds	r24, 0x0214
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	ed 5d       	subi	r30, 0xDD	; 221
     e6c:	fd 4f       	sbci	r31, 0xFD	; 253
     e6e:	20 81       	ld	r18, Z
     e70:	80 91 14 02 	lds	r24, 0x0214
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	fc 01       	movw	r30, r24
     e7a:	e2 5e       	subi	r30, 0xE2	; 226
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	80 81       	ld	r24, Z
     e80:	28 17       	cp	r18, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <check_password+0x40>
     e84:	99 c0       	rjmp	.+306    	; 0xfb8 <check_password+0x172>
		{
			reset_changes();
     e86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <reset_changes>
			LCD_displayString("Incorrect Password");
     e8a:	8c e7       	ldi	r24, 0x7C	; 124
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e4       	ldi	r25, 0x40	; 64
     e96:	ac e9       	ldi	r26, 0x9C	; 156
     e98:	b5 e4       	ldi	r27, 0x45	; 69
     e9a:	89 8f       	std	Y+25, r24	; 0x19
     e9c:	9a 8f       	std	Y+26, r25	; 0x1a
     e9e:	ab 8f       	std	Y+27, r26	; 0x1b
     ea0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea2:	69 8d       	ldd	r22, Y+25	; 0x19
     ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	4a ef       	ldi	r20, 0xFA	; 250
     eb0:	54 e4       	ldi	r21, 0x44	; 68
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	8d 8b       	std	Y+21, r24	; 0x15
     ebc:	9e 8b       	std	Y+22, r25	; 0x16
     ebe:	af 8b       	std	Y+23, r26	; 0x17
     ec0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ec2:	6d 89       	ldd	r22, Y+21	; 0x15
     ec4:	7e 89       	ldd	r23, Y+22	; 0x16
     ec6:	8f 89       	ldd	r24, Y+23	; 0x17
     ec8:	98 8d       	ldd	r25, Y+24	; 0x18
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e8       	ldi	r20, 0x80	; 128
     ed0:	5f e3       	ldi	r21, 0x3F	; 63
     ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed6:	88 23       	and	r24, r24
     ed8:	2c f4       	brge	.+10     	; 0xee4 <check_password+0x9e>
		__ticks = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	9c 8b       	std	Y+20, r25	; 0x14
     ee0:	8b 8b       	std	Y+19, r24	; 0x13
     ee2:	3f c0       	rjmp	.+126    	; 0xf62 <check_password+0x11c>
	else if (__tmp > 65535)
     ee4:	6d 89       	ldd	r22, Y+21	; 0x15
     ee6:	7e 89       	ldd	r23, Y+22	; 0x16
     ee8:	8f 89       	ldd	r24, Y+23	; 0x17
     eea:	98 8d       	ldd	r25, Y+24	; 0x18
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	3f ef       	ldi	r19, 0xFF	; 255
     ef0:	4f e7       	ldi	r20, 0x7F	; 127
     ef2:	57 e4       	ldi	r21, 0x47	; 71
     ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef8:	18 16       	cp	r1, r24
     efa:	4c f5       	brge	.+82     	; 0xf4e <check_password+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efc:	69 8d       	ldd	r22, Y+25	; 0x19
     efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	8b 8b       	std	Y+19, r24	; 0x13
     f24:	0f c0       	rjmp	.+30     	; 0xf44 <check_password+0xfe>
     f26:	88 ec       	ldi	r24, 0xC8	; 200
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9a 8b       	std	Y+18, r25	; 0x12
     f2c:	89 8b       	std	Y+17, r24	; 0x11
     f2e:	89 89       	ldd	r24, Y+17	; 0x11
     f30:	9a 89       	ldd	r25, Y+18	; 0x12
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <check_password+0xec>
     f36:	9a 8b       	std	Y+18, r25	; 0x12
     f38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f44:	8b 89       	ldd	r24, Y+19	; 0x13
     f46:	9c 89       	ldd	r25, Y+20	; 0x14
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	69 f7       	brne	.-38     	; 0xf26 <check_password+0xe0>
     f4c:	14 c0       	rjmp	.+40     	; 0xf76 <check_password+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4e:	6d 89       	ldd	r22, Y+21	; 0x15
     f50:	7e 89       	ldd	r23, Y+22	; 0x16
     f52:	8f 89       	ldd	r24, Y+23	; 0x17
     f54:	98 8d       	ldd	r25, Y+24	; 0x18
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9c 8b       	std	Y+20, r25	; 0x14
     f60:	8b 8b       	std	Y+19, r24	; 0x13
     f62:	8b 89       	ldd	r24, Y+19	; 0x13
     f64:	9c 89       	ldd	r25, Y+20	; 0x14
     f66:	98 8b       	std	Y+16, r25	; 0x10
     f68:	8f 87       	std	Y+15, r24	; 0x0f
     f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6c:	98 89       	ldd	r25, Y+16	; 0x10
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <check_password+0x128>
     f72:	98 8b       	std	Y+16, r25	; 0x10
     f74:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5000);
			LCD_clearScreen();
     f76:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			first_time=0;
     f7a:	10 92 0c 02 	sts	0x020C, r1
			re_enter=1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 0e 02 	sts	0x020E, r24
			LCD_displayStringRowColumn(0, 0, "please Enter Password");
     f84:	2f e8       	ldi	r18, 0x8F	; 143
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	a9 01       	movw	r20, r18
     f8e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
			get_password();
     f9a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>
			warning++;
     f9e:	80 91 0d 02 	lds	r24, 0x020D
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 0d 02 	sts	0x020D, r24
			/* if the password was wrong 3 times in a row */
			if (warning == 3)
     fa8:	80 91 0d 02 	lds	r24, 0x020D
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	09 f0       	breq	.+2      	; 0xfb2 <check_password+0x16c>
     fb0:	80 c0       	rjmp	.+256    	; 0x10b2 <check_password+0x26c>
			{
				wrong_password();
     fb2:	0e 94 3e 0b 	call	0x167c	; 0x167c <wrong_password>
     fb6:	7d c0       	rjmp	.+250    	; 0x10b2 <check_password+0x26c>

		}
		/* if the two passwords match, save password */
		else
		{
			LCD_clearScreen();
     fb8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			LCD_displayString("Correct Password");
     fbc:	85 ea       	ldi	r24, 0xA5	; 165
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	aa ef       	ldi	r26, 0xFA	; 250
     fca:	b3 e4       	ldi	r27, 0x43	; 67
     fcc:	8b 87       	std	Y+11, r24	; 0x0b
     fce:	9c 87       	std	Y+12, r25	; 0x0c
     fd0:	ad 87       	std	Y+13, r26	; 0x0d
     fd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fda:	9e 85       	ldd	r25, Y+14	; 0x0e
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a ef       	ldi	r20, 0xFA	; 250
     fe2:	54 e4       	ldi	r21, 0x44	; 68
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8f 83       	std	Y+7, r24	; 0x07
     fee:	98 87       	std	Y+8, r25	; 0x08
     ff0:	a9 87       	std	Y+9, r26	; 0x09
     ff2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff4:	6f 81       	ldd	r22, Y+7	; 0x07
     ff6:	78 85       	ldd	r23, Y+8	; 0x08
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e8       	ldi	r20, 0x80	; 128
    1002:	5f e3       	ldi	r21, 0x3F	; 63
    1004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1008:	88 23       	and	r24, r24
    100a:	2c f4       	brge	.+10     	; 0x1016 <check_password+0x1d0>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9e 83       	std	Y+6, r25	; 0x06
    1012:	8d 83       	std	Y+5, r24	; 0x05
    1014:	3f c0       	rjmp	.+126    	; 0x1094 <check_password+0x24e>
	else if (__tmp > 65535)
    1016:	6f 81       	ldd	r22, Y+7	; 0x07
    1018:	78 85       	ldd	r23, Y+8	; 0x08
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	4c f5       	brge	.+82     	; 0x1080 <check_password+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1030:	7c 85       	ldd	r23, Y+12	; 0x0c
    1032:	8d 85       	ldd	r24, Y+13	; 0x0d
    1034:	9e 85       	ldd	r25, Y+14	; 0x0e
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <check_password+0x230>
    1058:	88 ec       	ldi	r24, 0xC8	; 200
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <check_password+0x21e>
    1068:	9c 83       	std	Y+4, r25	; 0x04
    106a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f7       	brne	.-38     	; 0x1058 <check_password+0x212>
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <check_password+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <check_password+0x25a>
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    10a8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			flag = 1;                    /* To proceed to next option */
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 93 15 02 	sts	0x0215, r24
	LCD_clearScreen();
	first_time = passCount = re_enter = reset = flag = i = option = warning = 0;
}
void check_password()
{
	for(i = 0; i < PASSWORD_SIZE; i++)
    10b2:	80 91 14 02 	lds	r24, 0x0214
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 14 02 	sts	0x0214, r24
    10bc:	80 91 14 02 	lds	r24, 0x0214
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <check_password+0x280>
    10c4:	cd ce       	rjmp	.-614    	; 0xe60 <check_password+0x1a>
			_delay_ms(500);
			LCD_clearScreen();
			flag = 1;                    /* To proceed to next option */
		}
	}
}
    10c6:	6c 96       	adiw	r28, 0x1c	; 28
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <change_password>:

void change_password()
{
    10d8:	1f 93       	push	r17
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	6c 97       	sbiw	r28, 0x1c	; 28
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    10ee:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
	LCD_displayString("please enter the old Password: ");
    10f2:	86 eb       	ldi	r24, 0xB6	; 182
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
	LCD_moveCursor(1, 0);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
	passCount=0;
    1102:	10 92 0f 02 	sts	0x020F, r1
    1106:	a3 c1       	rjmp	.+838    	; 0x144e <change_password+0x376>
	while (passCount < 5)
	{
		get_password();
    1108:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>

		for(i = 0; i < PASSWORD_SIZE; i++)
    110c:	10 92 14 02 	sts	0x0214, r1
    1110:	0c c0       	rjmp	.+24     	; 0x112a <change_password+0x52>
		{
			/*sending signal to MC2 to save the sent data*/
			if(i == 0)
    1112:	80 91 14 02 	lds	r24, 0x0214
    1116:	88 23       	and	r24, r24
    1118:	19 f4       	brne	.+6      	; 0x1120 <change_password+0x48>
			{
				UART_sendByte('#');        /* '#' referenced to SAVE */
    111a:	83 e2       	ldi	r24, 0x23	; 35
    111c:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
	passCount=0;
	while (passCount < 5)
	{
		get_password();

		for(i = 0; i < PASSWORD_SIZE; i++)
    1120:	80 91 14 02 	lds	r24, 0x0214
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	80 93 14 02 	sts	0x0214, r24
    112a:	80 91 14 02 	lds	r24, 0x0214
    112e:	85 30       	cpi	r24, 0x05	; 5
    1130:	80 f3       	brcs	.-32     	; 0x1112 <change_password+0x3a>
			{
				UART_sendByte('#');        /* '#' referenced to SAVE */
			}
		}
		/* Check received password */
		if (checkpass[i] != UART_recieveByte())
    1132:	80 91 14 02 	lds	r24, 0x0214
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	fc 01       	movw	r30, r24
    113c:	ed 5d       	subi	r30, 0xDD	; 221
    113e:	fd 4f       	sbci	r31, 0xFD	; 253
    1140:	10 81       	ld	r17, Z
    1142:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_recieveByte>
    1146:	18 17       	cp	r17, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <change_password+0x74>
    114a:	7d c0       	rjmp	.+250    	; 0x1246 <change_password+0x16e>
		{
			LCD_clearScreen();
    114c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1150:	86 ed       	ldi	r24, 0xD6	; 214
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
			warning++;
    1158:	80 91 0d 02 	lds	r24, 0x020D
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	80 93 0d 02 	sts	0x020D, r24
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	aa ef       	ldi	r26, 0xFA	; 250
    1168:	b4 e4       	ldi	r27, 0x44	; 68
    116a:	89 8f       	std	Y+25, r24	; 0x19
    116c:	9a 8f       	std	Y+26, r25	; 0x1a
    116e:	ab 8f       	std	Y+27, r26	; 0x1b
    1170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	69 8d       	ldd	r22, Y+25	; 0x19
    1174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a ef       	ldi	r20, 0xFA	; 250
    1180:	54 e4       	ldi	r21, 0x44	; 68
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8d 8b       	std	Y+21, r24	; 0x15
    118c:	9e 8b       	std	Y+22, r25	; 0x16
    118e:	af 8b       	std	Y+23, r26	; 0x17
    1190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <change_password+0xdc>
		__ticks = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <change_password+0x15a>
	else if (__tmp > 65535)
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	4c f5       	brge	.+82     	; 0x121e <change_password+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	69 8d       	ldd	r22, Y+25	; 0x19
    11ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	51 e4       	ldi	r21, 0x41	; 65
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9c 8b       	std	Y+20, r25	; 0x14
    11f2:	8b 8b       	std	Y+19, r24	; 0x13
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <change_password+0x13c>
    11f6:	88 ec       	ldi	r24, 0xC8	; 200
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9a 8b       	std	Y+18, r25	; 0x12
    11fc:	89 8b       	std	Y+17, r24	; 0x11
    11fe:	89 89       	ldd	r24, Y+17	; 0x11
    1200:	9a 89       	ldd	r25, Y+18	; 0x12
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <change_password+0x12a>
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8b 89       	ldd	r24, Y+19	; 0x13
    120c:	9c 89       	ldd	r25, Y+20	; 0x14
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8b 89       	ldd	r24, Y+19	; 0x13
    1216:	9c 89       	ldd	r25, Y+20	; 0x14
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f7       	brne	.-38     	; 0x11f6 <change_password+0x11e>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <change_password+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	6d 89       	ldd	r22, Y+21	; 0x15
    1220:	7e 89       	ldd	r23, Y+22	; 0x16
    1222:	8f 89       	ldd	r24, Y+23	; 0x17
    1224:	98 8d       	ldd	r25, Y+24	; 0x18
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9c 8b       	std	Y+20, r25	; 0x14
    1230:	8b 8b       	std	Y+19, r24	; 0x13
    1232:	8b 89       	ldd	r24, Y+19	; 0x13
    1234:	9c 89       	ldd	r25, Y+20	; 0x14
    1236:	98 8b       	std	Y+16, r25	; 0x10
    1238:	8f 87       	std	Y+15, r24	; 0x0f
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	98 89       	ldd	r25, Y+16	; 0x10
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <change_password+0x166>
    1242:	98 8b       	std	Y+16, r25	; 0x10
    1244:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
		}
		/* if the password entered correctly reset everything */
		if(i == 5)
    1246:	80 91 14 02 	lds	r24, 0x0214
    124a:	85 30       	cpi	r24, 0x05	; 5
    124c:	09 f0       	breq	.+2      	; 0x1250 <change_password+0x178>
    124e:	c9 c0       	rjmp	.+402    	; 0x13e2 <change_password+0x30a>
		{
			reset_changes();
    1250:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <reset_changes>
			UART_sendByte('R');     /* 'R' referenced to RESET */
    1254:	82 e5       	ldi	r24, 0x52	; 82
    1256:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
			UART_sendByte(0xFF);    /*send the new value of re_enter*/
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e2       	ldi	r26, 0x20	; 32
    1266:	b1 e4       	ldi	r27, 0x41	; 65
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	9c 87       	std	Y+12, r25	; 0x0c
    126c:	ad 87       	std	Y+13, r26	; 0x0d
    126e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a ef       	ldi	r20, 0xFA	; 250
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	8f 83       	std	Y+7, r24	; 0x07
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	a9 87       	std	Y+9, r26	; 0x09
    128e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e8       	ldi	r20, 0x80	; 128
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <change_password+0x1da>
		__ticks = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	3f c0       	rjmp	.+126    	; 0x1330 <change_password+0x258>
	else if (__tmp > 65535)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	4c f5       	brge	.+82     	; 0x131c <change_password+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e2       	ldi	r20, 0x20	; 32
    12d8:	51 e4       	ldi	r21, 0x41	; 65
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	0f c0       	rjmp	.+30     	; 0x1312 <change_password+0x23a>
    12f4:	88 ec       	ldi	r24, 0xC8	; 200
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <change_password+0x228>
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	69 f7       	brne	.-38     	; 0x12f4 <change_password+0x21c>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <change_password+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <change_password+0x264>
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			LCD_clearScreen();
    1344:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Enter new Pass");
    1348:	25 ee       	ldi	r18, 0xE5	; 229
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <change_password+0x28c>
			while (passCount < 5)
			{
				get_password();
    1360:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>
			UART_sendByte(0xFF);    /*send the new value of re_enter*/
			_delay_ms(10);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Enter new Pass");
			LCD_moveCursor(1, 0);
			while (passCount < 5)
    1364:	80 91 0f 02 	lds	r24, 0x020F
    1368:	85 30       	cpi	r24, 0x05	; 5
    136a:	d0 f3       	brcs	.-12     	; 0x1360 <change_password+0x288>
			{
				get_password();
			}
			LCD_clearScreen();
    136c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			if (re_enter == 1)
    1370:	80 91 0e 02 	lds	r24, 0x020E
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	79 f5       	brne	.+94     	; 0x13d6 <change_password+0x2fe>
			{
				LCD_clearScreen();
    1378:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Enter again");
    137c:	24 ef       	ldi	r18, 0xF4	; 244
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
				for (i=0;i<PASSWORD_SIZE;i++)
    138a:	10 92 14 02 	sts	0x0214, r1
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <change_password+0x2f2>
				{
					checkpass[i]=password[i];
    1390:	80 91 14 02 	lds	r24, 0x0214
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	80 91 14 02 	lds	r24, 0x0214
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 5e       	subi	r30, 0xE2	; 226
    13a4:	fd 4f       	sbci	r31, 0xFD	; 253
    13a6:	80 81       	ld	r24, Z
    13a8:	f9 01       	movw	r30, r18
    13aa:	ed 5d       	subi	r30, 0xDD	; 221
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	80 83       	st	Z, r24
					password[i]=0;
    13b0:	80 91 14 02 	lds	r24, 0x0214
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	fc 01       	movw	r30, r24
    13ba:	e2 5e       	subi	r30, 0xE2	; 226
    13bc:	fd 4f       	sbci	r31, 0xFD	; 253
    13be:	10 82       	st	Z, r1
			LCD_clearScreen();
			if (re_enter == 1)
			{
				LCD_clearScreen();
				LCD_displayStringRowColumn(0, 0, "Enter again");
				for (i=0;i<PASSWORD_SIZE;i++)
    13c0:	80 91 14 02 	lds	r24, 0x0214
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 14 02 	sts	0x0214, r24
    13ca:	80 91 14 02 	lds	r24, 0x0214
    13ce:	85 30       	cpi	r24, 0x05	; 5
    13d0:	f8 f2       	brcs	.-66     	; 0x1390 <change_password+0x2b8>
				{
					checkpass[i]=password[i];
					password[i]=0;
				}
				i=0;
    13d2:	10 92 14 02 	sts	0x0214, r1
			}
			/* check the second and last attempt */
			if(re_enter == 2)
    13d6:	80 91 0e 02 	lds	r24, 0x020E
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <change_password+0x30a>
			{
				check_password();
    13de:	0e 94 23 07 	call	0xe46	; 0xe46 <check_password>
			}


		}
		/* if the user entered password wrong 3 times in a row */
		if (warning == 3)
    13e2:	80 91 0d 02 	lds	r24, 0x020D
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 f5       	brne	.+100    	; 0x144e <change_password+0x376>
		{
			/* Enable Buzzer */
			UART_sendByte('B');     /* 'B' referenced to BUZZER */
    13ea:	82 e4       	ldi	r24, 0x42	; 66
    13ec:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <change_password+0x32c>
			while (warning == 3)
			{
				LCD_displayStringRowColumn(0, 0, "WARNING!!");
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
				LCD_clearScreen();
    1400:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
		/* if the user entered password wrong 3 times in a row */
		if (warning == 3)
		{
			/* Enable Buzzer */
			UART_sendByte('B');     /* 'B' referenced to BUZZER */
			while (warning == 3)
    1404:	80 91 0d 02 	lds	r24, 0x020D
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	99 f3       	breq	.-26     	; 0x13f2 <change_password+0x31a>
			{
				LCD_displayStringRowColumn(0, 0, "WARNING!!");
				LCD_clearScreen();
			}
			LCD_displayStringRowColumn(1, 0, "Calling Security");
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	31 e0       	ldi	r19, 0x01	; 1
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
			TIMER0_init(&Config_Ptr);             /* start Timer0 */
    141a:	86 e0       	ldi	r24, 0x06	; 6
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	0e 94 10 18 	call	0x3020	; 0x3020 <TIMER0_init>
			while(sec < 60);            /* Wait for one minute */
    1422:	80 91 13 02 	lds	r24, 0x0213
    1426:	8c 33       	cpi	r24, 0x3C	; 60
    1428:	e0 f3       	brcs	.-8      	; 0x1422 <change_password+0x34a>
			TIMER0_stop();                    /* Disable TIMER0 */
    142a:	0e 94 c0 18 	call	0x3180	; 0x3180 <TIMER0_stop>
			sec = 0;
    142e:	10 92 13 02 	sts	0x0213, r1
			/* reset options variables only */
			option = i = warning = passCount=0;
    1432:	10 92 0f 02 	sts	0x020F, r1
    1436:	80 91 0f 02 	lds	r24, 0x020F
    143a:	80 93 0d 02 	sts	0x020D, r24
    143e:	80 91 0d 02 	lds	r24, 0x020D
    1442:	80 93 14 02 	sts	0x0214, r24
    1446:	80 91 14 02 	lds	r24, 0x0214
    144a:	80 93 11 02 	sts	0x0211, r24
{
	LCD_clearScreen();
	LCD_displayString("please enter the old Password: ");
	LCD_moveCursor(1, 0);
	passCount=0;
	while (passCount < 5)
    144e:	80 91 0f 02 	lds	r24, 0x020F
    1452:	85 30       	cpi	r24, 0x05	; 5
    1454:	08 f4       	brcc	.+2      	; 0x1458 <change_password+0x380>
    1456:	58 ce       	rjmp	.-848    	; 0x1108 <change_password+0x30>
			sec = 0;
			/* reset options variables only */
			option = i = warning = passCount=0;
		}
	}
}
    1458:	6c 96       	adiw	r28, 0x1c	; 28
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	1f 91       	pop	r17
    146a:	08 95       	ret

0000146c <AppConfig>:

void AppConfig()
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	27 97       	sbiw	r28, 0x07	; 7
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1480:	0e 94 40 12 	call	0x2480	; 0x2480 <LCD_init>
	UART_configType Config_ptr={a8_BitData,One_Stop_Bit,NO_Parity};
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	fe 01       	movw	r30, r28
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	df 01       	movw	r26, r30
    148c:	98 2f       	mov	r25, r24
    148e:	1d 92       	st	X+, r1
    1490:	9a 95       	dec	r25
    1492:	e9 f7       	brne	.-6      	; 0x148e <AppConfig+0x22>
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	ab 83       	std	Y+3, r26	; 0x03
    14a2:	bc 83       	std	Y+4, r27	; 0x04
	UART_init(UART_BAUD_RATE,&Config_ptr);
    14a4:	60 e8       	ldi	r22, 0x80	; 128
    14a6:	75 e2       	ldi	r23, 0x25	; 37
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9e 01       	movw	r18, r28
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	a9 01       	movw	r20, r18
    14b4:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_init>

	TIMER0_init(&Config_Ptr);
    14b8:	86 e0       	ldi	r24, 0x06	; 6
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	0e 94 10 18 	call	0x3020	; 0x3020 <TIMER0_init>
	TIMER0_OVF_setCallBack(timerCallBack);
    14c0:	83 ea       	ldi	r24, 0xA3	; 163
    14c2:	95 e0       	ldi	r25, 0x05	; 5
    14c4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <TIMER0_OVF_setCallBack>
}
    14c8:	27 96       	adiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <open_door>:


void open_door()
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	2e 97       	sbiw	r28, 0x0e	; 14
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    14ee:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "the Password entered is Correct");
    14f2:	2b e1       	ldi	r18, 0x1B	; 27
    14f4:	31 e0       	ldi	r19, 0x01	; 1
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e8       	ldi	r25, 0x80	; 128
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b5 e4       	ldi	r27, 0x45	; 69
    1508:	8b 87       	std	Y+11, r24	; 0x0b
    150a:	9c 87       	std	Y+12, r25	; 0x0c
    150c:	ad 87       	std	Y+13, r26	; 0x0d
    150e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1510:	6b 85       	ldd	r22, Y+11	; 0x0b
    1512:	7c 85       	ldd	r23, Y+12	; 0x0c
    1514:	8d 85       	ldd	r24, Y+13	; 0x0d
    1516:	9e 85       	ldd	r25, Y+14	; 0x0e
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a ef       	ldi	r20, 0xFA	; 250
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8f 83       	std	Y+7, r24	; 0x07
    152a:	98 87       	std	Y+8, r25	; 0x08
    152c:	a9 87       	std	Y+9, r26	; 0x09
    152e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1530:	6f 81       	ldd	r22, Y+7	; 0x07
    1532:	78 85       	ldd	r23, Y+8	; 0x08
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1544:	88 23       	and	r24, r24
    1546:	2c f4       	brge	.+10     	; 0x1552 <open_door+0x78>
		__ticks = 1;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	3f c0       	rjmp	.+126    	; 0x15d0 <open_door+0xf6>
	else if (__tmp > 65535)
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	3f ef       	ldi	r19, 0xFF	; 255
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	57 e4       	ldi	r21, 0x47	; 71
    1562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1566:	18 16       	cp	r1, r24
    1568:	4c f5       	brge	.+82     	; 0x15bc <open_door+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	51 e4       	ldi	r21, 0x41	; 65
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <open_door+0xd8>
    1594:	88 ec       	ldi	r24, 0xC8	; 200
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <open_door+0xc6>
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	69 f7       	brne	.-38     	; 0x1594 <open_door+0xba>
    15ba:	14 c0       	rjmp	.+40     	; 0x15e4 <open_door+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <open_door+0x102>
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	UART_sendByte('O');     /* 'O' referenced to OPEN DOOR */
    15e4:	8f e4       	ldi	r24, 0x4F	; 79
    15e6:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
	UART_sendByte('#');     /* send signal to MC2 to open the door */
    15ea:	83 e2       	ldi	r24, 0x23	; 35
    15ec:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
	LCD_displayStringRowColumn(1, 0, "Opening the Door... ");
    15f0:	2b e3       	ldi	r18, 0x3B	; 59
    15f2:	31 e0       	ldi	r19, 0x01	; 1
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>

	sec=0;
    15fe:	10 92 13 02 	sts	0x0213, r1
	while(sec < 15);    /* wait for 15 seconds */
    1602:	80 91 13 02 	lds	r24, 0x0213
    1606:	8f 30       	cpi	r24, 0x0F	; 15
    1608:	e0 f3       	brcs	.-8      	; 0x1602 <open_door+0x128>
	LCD_displayStringRowColumn(1, 0, "Closing the Door... ");
    160a:	20 e5       	ldi	r18, 0x50	; 80
    160c:	31 e0       	ldi	r19, 0x01	; 1
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	a9 01       	movw	r20, r18
    1614:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
	sec=0;
    1618:	10 92 13 02 	sts	0x0213, r1
	while(sec < 15);    /* wait 15 seconds */
    161c:	80 91 13 02 	lds	r24, 0x0213
    1620:	8f 30       	cpi	r24, 0x0F	; 15
    1622:	e0 f3       	brcs	.-8      	; 0x161c <open_door+0x142>
	sec=0;
    1624:	10 92 13 02 	sts	0x0213, r1
	LCD_clearScreen();
    1628:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
	LCD_displayString("Press 'Enter' to return to Options" );
    162c:	85 e6       	ldi	r24, 0x65	; 101
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    1634:	12 c0       	rjmp	.+36     	; 0x165a <open_door+0x180>
	while (option == '+' || option == '-')
	{
		if(KEYPAD_getPressedKey() == 13)
    1636:	0e 94 48 11 	call	0x2290	; 0x2290 <KEYPAD_getPressedKey>
    163a:	8d 30       	cpi	r24, 0x0D	; 13
    163c:	71 f4       	brne	.+28     	; 0x165a <open_door+0x180>
		{
			/* reset options variables only */
			option = i = warning = passCount = 0;
    163e:	10 92 0f 02 	sts	0x020F, r1
    1642:	80 91 0f 02 	lds	r24, 0x020F
    1646:	80 93 0d 02 	sts	0x020D, r24
    164a:	80 91 0d 02 	lds	r24, 0x020D
    164e:	80 93 14 02 	sts	0x0214, r24
    1652:	80 91 14 02 	lds	r24, 0x0214
    1656:	80 93 11 02 	sts	0x0211, r24
	sec=0;
	while(sec < 15);    /* wait 15 seconds */
	sec=0;
	LCD_clearScreen();
	LCD_displayString("Press 'Enter' to return to Options" );
	while (option == '+' || option == '-')
    165a:	80 91 11 02 	lds	r24, 0x0211
    165e:	8b 32       	cpi	r24, 0x2B	; 43
    1660:	51 f3       	breq	.-44     	; 0x1636 <open_door+0x15c>
    1662:	80 91 11 02 	lds	r24, 0x0211
    1666:	8d 32       	cpi	r24, 0x2D	; 45
    1668:	31 f3       	breq	.-52     	; 0x1636 <open_door+0x15c>
		{
			/* reset options variables only */
			option = i = warning = passCount = 0;
		}
	}
}
    166a:	2e 96       	adiw	r28, 0x0e	; 14
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <wrong_password>:

void wrong_password()
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	/* Enable Buzzer */
	UART_sendByte('B');     /* 'B' referenced to BUZZER */
    1684:	82 e4       	ldi	r24, 0x42	; 66
    1686:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
    168a:	09 c0       	rjmp	.+18     	; 0x169e <wrong_password+0x22>
	while (warning == 3)
	{
		LCD_displayStringRowColumn(0, 0, "WARNING!!");
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	31 e0       	ldi	r19, 0x01	; 1
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	a9 01       	movw	r20, r18
    1696:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
		LCD_clearScreen();
    169a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>

void wrong_password()
{
	/* Enable Buzzer */
	UART_sendByte('B');     /* 'B' referenced to BUZZER */
	while (warning == 3)
    169e:	80 91 0d 02 	lds	r24, 0x020D
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	99 f3       	breq	.-26     	; 0x168c <wrong_password+0x10>
	{
		LCD_displayStringRowColumn(0, 0, "WARNING!!");
		LCD_clearScreen();
	}
	LCD_displayStringRowColumn(1, 0, "Calling Security");
    16a6:	2a e0       	ldi	r18, 0x0A	; 10
    16a8:	31 e0       	ldi	r19, 0x01	; 1
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
	TIMER0_init(&Config_Ptr);             /* start Timer0 */
    16b4:	86 e0       	ldi	r24, 0x06	; 6
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 10 18 	call	0x3020	; 0x3020 <TIMER0_init>
	while(sec < 60);            /* Wait for one minute */
    16bc:	80 91 13 02 	lds	r24, 0x0213
    16c0:	8c 33       	cpi	r24, 0x3C	; 60
    16c2:	e0 f3       	brcs	.-8      	; 0x16bc <wrong_password+0x40>
	TIMER0_stop();                    /* Disable TIMER0 */
    16c4:	0e 94 c0 18 	call	0x3180	; 0x3180 <TIMER0_stop>
	sec = 0;
    16c8:	10 92 13 02 	sts	0x0213, r1
	option = i = warning = passCount=0;
    16cc:	10 92 0f 02 	sts	0x020F, r1
    16d0:	80 91 0f 02 	lds	r24, 0x020F
    16d4:	80 93 0d 02 	sts	0x020D, r24
    16d8:	80 91 0d 02 	lds	r24, 0x020D
    16dc:	80 93 14 02 	sts	0x0214, r24
    16e0:	80 91 14 02 	lds	r24, 0x0214
    16e4:	80 93 11 02 	sts	0x0211, r24
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <main>:
int main()
{
    16ee:	1f 93       	push	r17
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	ac 97       	sbiw	r28, 0x2c	; 44
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);     // Enable I-bit //
    1704:	af e5       	ldi	r26, 0x5F	; 95
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ef e5       	ldi	r30, 0x5F	; 95
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	8c 93       	st	X, r24

	AppConfig();
    1712:	0e 94 36 0a 	call	0x146c	; 0x146c <AppConfig>
	UART_sendByte('E');   /* Send signal to MC2 to get re_enter value from EEPROM */
    1716:	85 e4       	ldi	r24, 0x45	; 69
    1718:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
	re_enter=UART_recieveByte();
    171c:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_recieveByte>
    1720:	80 93 0e 02 	sts	0x020E, r24
	/* if it is not equal to 2 then user didn't register password yet */
	if(re_enter !=2)
    1724:	80 91 0e 02 	lds	r24, 0x020E
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	11 f0       	breq	.+4      	; 0x1730 <main+0x42>
	{
		re_enter=0;
    172c:	10 92 0e 02 	sts	0x020E, r1
	}

	while (1)
	{
		if (first_time == 0 )
    1730:	80 91 0c 02 	lds	r24, 0x020C
    1734:	88 23       	and	r24, r24
    1736:	91 f4       	brne	.+36     	; 0x175c <main+0x6e>
		{
			LCD_displayStringRowColumn(0, 0, "please Enter Password:");
    1738:	28 e8       	ldi	r18, 0x88	; 136
    173a:	31 e0       	ldi	r19, 0x01	; 1
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	a9 01       	movw	r20, r18
    1742:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>

			LCD_moveCursor(1, 0);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <main+0x66>
			while (passCount < 5)
			{
				get_password();
    1750:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>
		if (first_time == 0 )
		{
			LCD_displayStringRowColumn(0, 0, "please Enter Password:");

			LCD_moveCursor(1, 0);
			while (passCount < 5)
    1754:	80 91 0f 02 	lds	r24, 0x020F
    1758:	85 30       	cpi	r24, 0x05	; 5
    175a:	d0 f3       	brcs	.-12     	; 0x1750 <main+0x62>
			{
				get_password();
			}
		}
		LCD_clearScreen();
    175c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
		first_time++;
    1760:	80 91 0c 02 	lds	r24, 0x020C
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	80 93 0c 02 	sts	0x020C, r24
		if (re_enter == 0)
    176a:	80 91 0e 02 	lds	r24, 0x020E
    176e:	88 23       	and	r24, r24
    1770:	79 f4       	brne	.+30     	; 0x1790 <main+0xa2>
		{
			LCD_clearScreen();
    1772:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "please Enter the Password again:");
    1776:	2f e9       	ldi	r18, 0x9F	; 159
    1778:	31 e0       	ldi	r19, 0x01	; 1
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);                 /* Go to second row */
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
			passCount=0;
    178c:	10 92 0f 02 	sts	0x020F, r1
		}
		if(re_enter < 2)
    1790:	80 91 0e 02 	lds	r24, 0x020E
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <main+0xb4>
		{
			re_enter++;
    1798:	80 91 0e 02 	lds	r24, 0x020E
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	80 93 0e 02 	sts	0x020E, r24
		}
		/* check the first re-entered attempt to save it to a new variable */
		if (re_enter == 1)
    17a2:	80 91 0e 02 	lds	r24, 0x020E
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	31 f5       	brne	.+76     	; 0x17f6 <main+0x108>
		{
			for (i=0;i<PASSWORD_SIZE;i++)
    17aa:	10 92 14 02 	sts	0x0214, r1
    17ae:	1d c0       	rjmp	.+58     	; 0x17ea <main+0xfc>
			{
				checkpass[i]=password[i];
    17b0:	80 91 14 02 	lds	r24, 0x0214
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	80 91 14 02 	lds	r24, 0x0214
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	e2 5e       	subi	r30, 0xE2	; 226
    17c4:	fd 4f       	sbci	r31, 0xFD	; 253
    17c6:	80 81       	ld	r24, Z
    17c8:	f9 01       	movw	r30, r18
    17ca:	ed 5d       	subi	r30, 0xDD	; 221
    17cc:	fd 4f       	sbci	r31, 0xFD	; 253
    17ce:	80 83       	st	Z, r24
				password[i]=0;
    17d0:	80 91 14 02 	lds	r24, 0x0214
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	e2 5e       	subi	r30, 0xE2	; 226
    17dc:	fd 4f       	sbci	r31, 0xFD	; 253
    17de:	10 82       	st	Z, r1
			re_enter++;
		}
		/* check the first re-entered attempt to save it to a new variable */
		if (re_enter == 1)
		{
			for (i=0;i<PASSWORD_SIZE;i++)
    17e0:	80 91 14 02 	lds	r24, 0x0214
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	80 93 14 02 	sts	0x0214, r24
    17ea:	80 91 14 02 	lds	r24, 0x0214
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	f8 f2       	brcs	.-66     	; 0x17b0 <main+0xc2>
			{
				checkpass[i]=password[i];
				password[i]=0;
			}
			i=0;
    17f2:	10 92 14 02 	sts	0x0214, r1
		}
		/* check the second attempt */
		if(re_enter == 2)
    17f6:	80 91 0e 02 	lds	r24, 0x020E
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	11 f4       	brne	.+4      	; 0x1802 <main+0x114>
		{
			check_password();
    17fe:	0e 94 23 07 	call	0xe46	; 0xe46 <check_password>
		}
		if(flag == 1)
    1802:	80 91 15 02 	lds	r24, 0x0215
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	09 f0       	breq	.+2      	; 0x180c <main+0x11e>
    180a:	fe c1       	rjmp	.+1020   	; 0x1c08 <main+0x51a>
		{
			first_time = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 0c 02 	sts	0x020C, r24
			/* To send the correct password to MC2: */
			for(i=0;i<PASSWORD_SIZE;i++)
    1812:	10 92 14 02 	sts	0x0214, r1
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <main+0x156>
			{
				/*send a signal to MC2 to save the next sent data*/
				if(i == 0){
    1818:	80 91 14 02 	lds	r24, 0x0214
    181c:	88 23       	and	r24, r24
    181e:	19 f4       	brne	.+6      	; 0x1826 <main+0x138>
					UART_sendByte('S');        /* 'S' referenced to SAVE */
    1820:	83 e5       	ldi	r24, 0x53	; 83
    1822:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
				}
				UART_sendByte(password[i]);        /*send password to MC2 to save it in EEPROM*/
    1826:	80 91 14 02 	lds	r24, 0x0214
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	e2 5e       	subi	r30, 0xE2	; 226
    1832:	fd 4f       	sbci	r31, 0xFD	; 253
    1834:	80 81       	ld	r24, Z
    1836:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
		}
		if(flag == 1)
		{
			first_time = 1;
			/* To send the correct password to MC2: */
			for(i=0;i<PASSWORD_SIZE;i++)
    183a:	80 91 14 02 	lds	r24, 0x0214
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	80 93 14 02 	sts	0x0214, r24
    1844:	80 91 14 02 	lds	r24, 0x0214
    1848:	85 30       	cpi	r24, 0x05	; 5
    184a:	30 f3       	brcs	.-52     	; 0x1818 <main+0x12a>
				if(i == 0){
					UART_sendByte('S');        /* 'S' referenced to SAVE */
				}
				UART_sendByte(password[i]);        /*send password to MC2 to save it in EEPROM*/
			}
			LCD_clearScreen();
    184c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
			LCD_displayString("the Password is Saved correctly");     /* show that the password is saved */
    1850:	80 ec       	ldi	r24, 0xC0	; 192
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	aa ef       	ldi	r26, 0xFA	; 250
    185e:	b4 e4       	ldi	r27, 0x44	; 68
    1860:	8f a3       	std	Y+39, r24	; 0x27
    1862:	98 a7       	std	Y+40, r25	; 0x28
    1864:	a9 a7       	std	Y+41, r26	; 0x29
    1866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6f a1       	ldd	r22, Y+39	; 0x27
    186a:	78 a5       	ldd	r23, Y+40	; 0x28
    186c:	89 a5       	ldd	r24, Y+41	; 0x29
    186e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8b a3       	std	Y+35, r24	; 0x23
    1882:	9c a3       	std	Y+36, r25	; 0x24
    1884:	ad a3       	std	Y+37, r26	; 0x25
    1886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1888:	6b a1       	ldd	r22, Y+35	; 0x23
    188a:	7c a1       	ldd	r23, Y+36	; 0x24
    188c:	8d a1       	ldd	r24, Y+37	; 0x25
    188e:	9e a1       	ldd	r25, Y+38	; 0x26
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <main+0x1bc>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <main+0x23a>
	else if (__tmp > 65535)
    18aa:	6b a1       	ldd	r22, Y+35	; 0x23
    18ac:	7c a1       	ldd	r23, Y+36	; 0x24
    18ae:	8d a1       	ldd	r24, Y+37	; 0x25
    18b0:	9e a1       	ldd	r25, Y+38	; 0x26
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6f a1       	ldd	r22, Y+39	; 0x27
    18c4:	78 a5       	ldd	r23, Y+40	; 0x28
    18c6:	89 a5       	ldd	r24, Y+41	; 0x29
    18c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9a a3       	std	Y+34, r25	; 0x22
    18e8:	89 a3       	std	Y+33, r24	; 0x21
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <main+0x21c>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	98 a3       	std	Y+32, r25	; 0x20
    18f2:	8f 8f       	std	Y+31, r24	; 0x1f
    18f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f6:	98 a1       	ldd	r25, Y+32	; 0x20
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <main+0x20a>
    18fc:	98 a3       	std	Y+32, r25	; 0x20
    18fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	89 a1       	ldd	r24, Y+33	; 0x21
    1902:	9a a1       	ldd	r25, Y+34	; 0x22
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	89 a1       	ldd	r24, Y+33	; 0x21
    190c:	9a a1       	ldd	r25, Y+34	; 0x22
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <main+0x1fe>
    1912:	7a c1       	rjmp	.+756    	; 0x1c08 <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9a a3       	std	Y+34, r25	; 0x22
    1926:	89 a3       	std	Y+33, r24	; 0x21
    1928:	89 a1       	ldd	r24, Y+33	; 0x21
    192a:	9a a1       	ldd	r25, Y+34	; 0x22
    192c:	9e 8f       	std	Y+30, r25	; 0x1e
    192e:	8d 8f       	std	Y+29, r24	; 0x1d
    1930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <main+0x246>
    1938:	9e 8f       	std	Y+30, r25	; 0x1e
    193a:	8d 8f       	std	Y+29, r24	; 0x1d
    193c:	65 c1       	rjmp	.+714    	; 0x1c08 <main+0x51a>
			_delay_ms(2000);                         /* show message for 2 seconds */
		}
		while (re_enter ==2 )
		{
			Menu();
    193e:	0e 94 ba 05 	call	0xb74	; 0xb74 <Menu>
			option = KEYPAD_getPressedKey();
    1942:	0e 94 48 11 	call	0x2290	; 0x2290 <KEYPAD_getPressedKey>
    1946:	80 93 11 02 	sts	0x0211, r24
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	aa e7       	ldi	r26, 0x7A	; 122
    1950:	b4 e4       	ldi	r27, 0x44	; 68
    1952:	89 8f       	std	Y+25, r24	; 0x19
    1954:	9a 8f       	std	Y+26, r25	; 0x1a
    1956:	ab 8f       	std	Y+27, r26	; 0x1b
    1958:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	69 8d       	ldd	r22, Y+25	; 0x19
    195c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8d 8b       	std	Y+21, r24	; 0x15
    1974:	9e 8b       	std	Y+22, r25	; 0x16
    1976:	af 8b       	std	Y+23, r26	; 0x17
    1978:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197a:	6d 89       	ldd	r22, Y+21	; 0x15
    197c:	7e 89       	ldd	r23, Y+22	; 0x16
    197e:	8f 89       	ldd	r24, Y+23	; 0x17
    1980:	98 8d       	ldd	r25, Y+24	; 0x18
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <main+0x2ae>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <main+0x32c>
	else if (__tmp > 65535)
    199c:	6d 89       	ldd	r22, Y+21	; 0x15
    199e:	7e 89       	ldd	r23, Y+22	; 0x16
    19a0:	8f 89       	ldd	r24, Y+23	; 0x17
    19a2:	98 8d       	ldd	r25, Y+24	; 0x18
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <main+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <main+0x30e>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9a 8b       	std	Y+18, r25	; 0x12
    19e4:	89 8b       	std	Y+17, r24	; 0x11
    19e6:	89 89       	ldd	r24, Y+17	; 0x11
    19e8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <main+0x2fc>
    19ee:	9a 8b       	std	Y+18, r25	; 0x12
    19f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9c 8b       	std	Y+20, r25	; 0x14
    19fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8b 89       	ldd	r24, Y+19	; 0x13
    19fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <main+0x2f0>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9c 8b       	std	Y+20, r25	; 0x14
    1a18:	8b 8b       	std	Y+19, r24	; 0x13
    1a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1e:	98 8b       	std	Y+16, r25	; 0x10
    1a20:	8f 87       	std	Y+15, r24	; 0x0f
    1a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a24:	98 89       	ldd	r25, Y+16	; 0x10
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <main+0x338>
    1a2a:	98 8b       	std	Y+16, r25	; 0x10
    1a2c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			switch (option)
    1a2e:	80 91 11 02 	lds	r24, 0x0211
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3c a7       	std	Y+44, r19	; 0x2c
    1a38:	2b a7       	std	Y+43, r18	; 0x2b
    1a3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a3e:	8b 32       	cpi	r24, 0x2B	; 43
    1a40:	91 05       	cpc	r25, r1
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <main+0x368>
    1a44:	2b a5       	ldd	r18, Y+43	; 0x2b
    1a46:	3c a5       	ldd	r19, Y+44	; 0x2c
    1a48:	2d 32       	cpi	r18, 0x2D	; 45
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <main+0x362>
    1a4e:	d6 c0       	rjmp	.+428    	; 0x1bfc <main+0x50e>
			{
			case '-':
				change_password();
    1a50:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <change_password>
    1a54:	d9 c0       	rjmp	.+434    	; 0x1c08 <main+0x51a>
				break;
			case'+':
				LCD_clearScreen();
    1a56:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
				LCD_displayString("Enter Password");
    1a5a:	80 ee       	ldi	r24, 0xE0	; 224
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>

				passCount=0,i=0;
    1a6a:	10 92 0f 02 	sts	0x020F, r1
    1a6e:	10 92 14 02 	sts	0x0214, r1
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <main+0x38a>
				while (passCount < 5)
				{
					get_password();
    1a74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>
				LCD_clearScreen();
				LCD_displayString("Enter Password");
				LCD_moveCursor(1, 0);

				passCount=0,i=0;
				while (passCount < 5)
    1a78:	80 91 0f 02 	lds	r24, 0x020F
    1a7c:	85 30       	cpi	r24, 0x05	; 5
    1a7e:	d0 f3       	brcs	.-12     	; 0x1a74 <main+0x386>
				{
					get_password();
				}

				for(i = 0; i < PASSWORD_SIZE; i++)
    1a80:	10 92 14 02 	sts	0x0214, r1
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <main+0x3b0>
				{
					/* get password from EEPROM and check it */
					if(i == 0)
    1a86:	80 91 14 02 	lds	r24, 0x0214
    1a8a:	88 23       	and	r24, r24
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <main+0x3a6>
					{
						UART_sendByte('#');
    1a8e:	83 e2       	ldi	r24, 0x23	; 35
    1a90:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
				while (passCount < 5)
				{
					get_password();
				}

				for(i = 0; i < PASSWORD_SIZE; i++)
    1a94:	80 91 14 02 	lds	r24, 0x0214
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 14 02 	sts	0x0214, r24
    1a9e:	80 91 14 02 	lds	r24, 0x0214
    1aa2:	85 30       	cpi	r24, 0x05	; 5
    1aa4:	80 f3       	brcs	.-32     	; 0x1a86 <main+0x398>
					}


				}
				/* Check received password */
				if (checkpass[i] != UART_recieveByte())
    1aa6:	80 91 14 02 	lds	r24, 0x0214
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	fc 01       	movw	r30, r24
    1ab0:	ed 5d       	subi	r30, 0xDD	; 221
    1ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab4:	10 81       	ld	r17, Z
    1ab6:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_recieveByte>
    1aba:	18 17       	cp	r17, r24
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <main+0x3d2>
    1abe:	91 c0       	rjmp	.+290    	; 0x1be2 <main+0x4f4>
				{
					LCD_clearScreen();
    1ac0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1ac4:	86 ed       	ldi	r24, 0xD6	; 214
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
					warning++;
    1acc:	80 91 0d 02 	lds	r24, 0x020D
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	80 93 0d 02 	sts	0x020D, r24
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	aa ef       	ldi	r26, 0xFA	; 250
    1adc:	b4 e4       	ldi	r27, 0x44	; 68
    1ade:	8b 87       	std	Y+11, r24	; 0x0b
    1ae0:	9c 87       	std	Y+12, r25	; 0x0c
    1ae2:	ad 87       	std	Y+13, r26	; 0x0d
    1ae4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a ef       	ldi	r20, 0xFA	; 250
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8f 83       	std	Y+7, r24	; 0x07
    1b00:	98 87       	std	Y+8, r25	; 0x08
    1b02:	a9 87       	std	Y+9, r26	; 0x09
    1b04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <main+0x43a>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <main+0x4b8>
	else if (__tmp > 65535)
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <main+0x49a>
    1b6a:	88 ec       	ldi	r24, 0xC8	; 200
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <main+0x488>
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <main+0x47c>
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <main+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <main+0x4c4>
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					LCD_clearScreen();
    1bba:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
					first_time=0;
    1bbe:	10 92 0c 02 	sts	0x020C, r1
					re_enter=1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 0e 02 	sts	0x020E, r24
					LCD_displayStringRowColumn(0, 0, "Enter Password");
    1bc8:	20 ee       	ldi	r18, 0xE0	; 224
    1bca:	31 e0       	ldi	r19, 0x01	; 1
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	a9 01       	movw	r20, r18
    1bd2:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
					get_password();
    1bde:	0e 94 4f 06 	call	0xc9e	; 0xc9e <get_password>
				}

				/* if the entered password is correct, open the door */
				if(i == 5)
    1be2:	80 91 14 02 	lds	r24, 0x0214
    1be6:	85 30       	cpi	r24, 0x05	; 5
    1be8:	11 f4       	brne	.+4      	; 0x1bee <main+0x500>
				{
					open_door();
    1bea:	0e 94 6d 0a 	call	0x14da	; 0x14da <open_door>
				}
				/* if user entered password wrong 3 times in a row */
				if (warning == 3)
    1bee:	80 91 0d 02 	lds	r24, 0x020D
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <main+0x51a>
				{
					wrong_password();
    1bf6:	0e 94 3e 0b 	call	0x167c	; 0x167c <wrong_password>
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <main+0x51a>
				}

				break;
			default:
				LCD_clearScreen();
    1bfc:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <LCD_clearScreen>
				LCD_displayString("Invalid Option");
    1c00:	8f ee       	ldi	r24, 0xEF	; 239
    1c02:	91 e0       	ldi	r25, 0x01	; 1
    1c04:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
			}
			LCD_clearScreen();
			LCD_displayString("the Password is Saved correctly");     /* show that the password is saved */
			_delay_ms(2000);                         /* show message for 2 seconds */
		}
		while (re_enter ==2 )
    1c08:	80 91 0e 02 	lds	r24, 0x020E
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <main+0x524>
    1c10:	96 ce       	rjmp	.-724    	; 0x193e <main+0x250>
    1c12:	8e cd       	rjmp	.-1252   	; 0x1730 <main+0x42>

00001c14 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <GPIO_setupPinDirection+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <GPIO_setupPinDirection+0x8>
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	6a 83       	std	Y+2, r22	; 0x02
    1c26:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 30       	cpi	r24, 0x08	; 8
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <GPIO_setupPinDirection+0x1c>
    1c2e:	d5 c0       	rjmp	.+426    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <GPIO_setupPinDirection+0x24>
    1c36:	d1 c0       	rjmp	.+418    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	3d 83       	std	Y+5, r19	; 0x05
    1c40:	2c 83       	std	Y+4, r18	; 0x04
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <GPIO_setupPinDirection+0x3a>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <GPIO_setupPinDirection+0xc0>
    1c4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c50:	3d 81       	ldd	r19, Y+5	; 0x05
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <GPIO_setupPinDirection+0x4e>
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	71 f0       	breq	.+28     	; 0x1c7c <GPIO_setupPinDirection+0x68>
    1c60:	bc c0       	rjmp	.+376    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
    1c62:	2c 81       	ldd	r18, Y+4	; 0x04
    1c64:	3d 81       	ldd	r19, Y+5	; 0x05
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <GPIO_setupPinDirection+0x5a>
    1c6c:	5f c0       	rjmp	.+190    	; 0x1d2c <GPIO_setupPinDirection+0x118>
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	9d 81       	ldd	r25, Y+5	; 0x05
    1c72:	83 30       	cpi	r24, 0x03	; 3
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <GPIO_setupPinDirection+0x66>
    1c78:	85 c0       	rjmp	.+266    	; 0x1d84 <GPIO_setupPinDirection+0x170>
    1c7a:	af c0       	rjmp	.+350    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	a1 f4       	brne	.+40     	; 0x1caa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c82:	aa e3       	ldi	r26, 0x3A	; 58
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ea e3       	ldi	r30, 0x3A	; 58
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <GPIO_setupPinDirection+0x8c>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <GPIO_setupPinDirection+0x88>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	98 c0       	rjmp	.+304    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1caa:	aa e3       	ldi	r26, 0x3A	; 58
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ea e3       	ldi	r30, 0x3A	; 58
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_setupPinDirection+0xb4>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_setupPinDirection+0xb0>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	83 c0       	rjmp	.+262    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cda:	a7 e3       	ldi	r26, 0x37	; 55
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e7 e3       	ldi	r30, 0x37	; 55
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_setupPinDirection+0xe4>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_setupPinDirection+0xe0>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	6c c0       	rjmp	.+216    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d02:	a7 e3       	ldi	r26, 0x37	; 55
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e3       	ldi	r30, 0x37	; 55
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_setupPinDirection+0x10c>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_setupPinDirection+0x108>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	57 c0       	rjmp	.+174    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	a1 f4       	brne	.+40     	; 0x1d5a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d32:	a4 e3       	ldi	r26, 0x34	; 52
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e4 e3       	ldi	r30, 0x34	; 52
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_setupPinDirection+0x13c>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_setupPinDirection+0x138>
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	40 c0       	rjmp	.+128    	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d5a:	a4 e3       	ldi	r26, 0x34	; 52
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e4 e3       	ldi	r30, 0x34	; 52
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_setupPinDirection+0x164>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_setupPinDirection+0x160>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	2b c0       	rjmp	.+86     	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	a1 f4       	brne	.+40     	; 0x1db2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d8a:	a1 e3       	ldi	r26, 0x31	; 49
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e1 e3       	ldi	r30, 0x31	; 49
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_setupPinDirection+0x194>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_setupPinDirection+0x190>
    1dac:	84 2b       	or	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1db2:	a1 e3       	ldi	r26, 0x31	; 49
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e1 e3       	ldi	r30, 0x31	; 49
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <GPIO_setupPinDirection+0x1bc>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <GPIO_setupPinDirection+0x1b8>
    1dd4:	80 95       	com	r24
    1dd6:	84 23       	and	r24, r20
    1dd8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GPIO_writePin+0x6>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <GPIO_writePin+0x8>
    1df2:	0f 92       	push	r0
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	6a 83       	std	Y+2, r22	; 0x02
    1dfc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	88 30       	cpi	r24, 0x08	; 8
    1e02:	08 f0       	brcs	.+2      	; 0x1e06 <GPIO_writePin+0x1c>
    1e04:	d5 c0       	rjmp	.+426    	; 0x1fb0 <GPIO_writePin+0x1c6>
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	08 f0       	brcs	.+2      	; 0x1e0e <GPIO_writePin+0x24>
    1e0c:	d1 c0       	rjmp	.+418    	; 0x1fb0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	3d 83       	std	Y+5, r19	; 0x05
    1e16:	2c 83       	std	Y+4, r18	; 0x04
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <GPIO_writePin+0x3a>
    1e22:	43 c0       	rjmp	.+134    	; 0x1eaa <GPIO_writePin+0xc0>
    1e24:	2c 81       	ldd	r18, Y+4	; 0x04
    1e26:	3d 81       	ldd	r19, Y+5	; 0x05
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <GPIO_writePin+0x4e>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	71 f0       	breq	.+28     	; 0x1e52 <GPIO_writePin+0x68>
    1e36:	bc c0       	rjmp	.+376    	; 0x1fb0 <GPIO_writePin+0x1c6>
    1e38:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <GPIO_writePin+0x5a>
    1e42:	5f c0       	rjmp	.+190    	; 0x1f02 <GPIO_writePin+0x118>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <GPIO_writePin+0x66>
    1e4e:	85 c0       	rjmp	.+266    	; 0x1f5a <GPIO_writePin+0x170>
    1e50:	af c0       	rjmp	.+350    	; 0x1fb0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	a1 f4       	brne	.+40     	; 0x1e80 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e58:	ab e3       	ldi	r26, 0x3B	; 59
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	eb e3       	ldi	r30, 0x3B	; 59
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_writePin+0x8c>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_writePin+0x88>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	98 c0       	rjmp	.+304    	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e80:	ab e3       	ldi	r26, 0x3B	; 59
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <GPIO_writePin+0xb4>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <GPIO_writePin+0xb0>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	83 c0       	rjmp	.+262    	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	a1 f4       	brne	.+40     	; 0x1ed8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1eb0:	a8 e3       	ldi	r26, 0x38	; 56
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e8 e3       	ldi	r30, 0x38	; 56
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <GPIO_writePin+0xe4>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <GPIO_writePin+0xe0>
    1ed2:	84 2b       	or	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	6c c0       	rjmp	.+216    	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ed8:	a8 e3       	ldi	r26, 0x38	; 56
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e8 e3       	ldi	r30, 0x38	; 56
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <GPIO_writePin+0x10c>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <GPIO_writePin+0x108>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	57 c0       	rjmp	.+174    	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	a1 f4       	brne	.+40     	; 0x1f30 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f08:	a5 e3       	ldi	r26, 0x35	; 53
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e5 e3       	ldi	r30, 0x35	; 53
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <GPIO_writePin+0x13c>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <GPIO_writePin+0x138>
    1f2a:	84 2b       	or	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	40 c0       	rjmp	.+128    	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f30:	a5 e3       	ldi	r26, 0x35	; 53
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <GPIO_writePin+0x164>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <GPIO_writePin+0x160>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	2b c0       	rjmp	.+86     	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	a1 f4       	brne	.+40     	; 0x1f88 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f60:	a2 e3       	ldi	r26, 0x32	; 50
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e2 e3       	ldi	r30, 0x32	; 50
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <GPIO_writePin+0x194>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <GPIO_writePin+0x190>
    1f82:	84 2b       	or	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f88:	a2 e3       	ldi	r26, 0x32	; 50
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e2 e3       	ldi	r30, 0x32	; 50
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <GPIO_writePin+0x1bc>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <GPIO_writePin+0x1b8>
    1faa:	80 95       	com	r24
    1fac:	84 23       	and	r24, r20
    1fae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_readPin+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <GPIO_readPin+0x8>
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	8a 83       	std	Y+2, r24	; 0x02
    1fd0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 30       	cpi	r24, 0x08	; 8
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <GPIO_readPin+0x1c>
    1fda:	84 c0       	rjmp	.+264    	; 0x20e4 <GPIO_readPin+0x124>
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <GPIO_readPin+0x24>
    1fe2:	80 c0       	rjmp	.+256    	; 0x20e4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3d 83       	std	Y+5, r19	; 0x05
    1fec:	2c 83       	std	Y+4, r18	; 0x04
    1fee:	4c 81       	ldd	r20, Y+4	; 0x04
    1ff0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ff2:	41 30       	cpi	r20, 0x01	; 1
    1ff4:	51 05       	cpc	r21, r1
    1ff6:	79 f1       	breq	.+94     	; 0x2056 <GPIO_readPin+0x96>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	91 05       	cpc	r25, r1
    2000:	34 f4       	brge	.+12     	; 0x200e <GPIO_readPin+0x4e>
    2002:	2c 81       	ldd	r18, Y+4	; 0x04
    2004:	3d 81       	ldd	r19, Y+5	; 0x05
    2006:	21 15       	cp	r18, r1
    2008:	31 05       	cpc	r19, r1
    200a:	69 f0       	breq	.+26     	; 0x2026 <GPIO_readPin+0x66>
    200c:	6b c0       	rjmp	.+214    	; 0x20e4 <GPIO_readPin+0x124>
    200e:	4c 81       	ldd	r20, Y+4	; 0x04
    2010:	5d 81       	ldd	r21, Y+5	; 0x05
    2012:	42 30       	cpi	r20, 0x02	; 2
    2014:	51 05       	cpc	r21, r1
    2016:	b9 f1       	breq	.+110    	; 0x2086 <GPIO_readPin+0xc6>
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	83 30       	cpi	r24, 0x03	; 3
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <GPIO_readPin+0x64>
    2022:	49 c0       	rjmp	.+146    	; 0x20b6 <GPIO_readPin+0xf6>
    2024:	5f c0       	rjmp	.+190    	; 0x20e4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2026:	e9 e3       	ldi	r30, 0x39	; 57
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a9 01       	movw	r20, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <GPIO_readPin+0x7e>
    203a:	55 95       	asr	r21
    203c:	47 95       	ror	r20
    203e:	8a 95       	dec	r24
    2040:	e2 f7       	brpl	.-8      	; 0x203a <GPIO_readPin+0x7a>
    2042:	ca 01       	movw	r24, r20
    2044:	81 70       	andi	r24, 0x01	; 1
    2046:	90 70       	andi	r25, 0x00	; 0
    2048:	88 23       	and	r24, r24
    204a:	19 f0       	breq	.+6      	; 0x2052 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	49 c0       	rjmp	.+146    	; 0x20e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2052:	19 82       	std	Y+1, r1	; 0x01
    2054:	47 c0       	rjmp	.+142    	; 0x20e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2056:	e6 e3       	ldi	r30, 0x36	; 54
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a9 01       	movw	r20, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <GPIO_readPin+0xae>
    206a:	55 95       	asr	r21
    206c:	47 95       	ror	r20
    206e:	8a 95       	dec	r24
    2070:	e2 f7       	brpl	.-8      	; 0x206a <GPIO_readPin+0xaa>
    2072:	ca 01       	movw	r24, r20
    2074:	81 70       	andi	r24, 0x01	; 1
    2076:	90 70       	andi	r25, 0x00	; 0
    2078:	88 23       	and	r24, r24
    207a:	19 f0       	breq	.+6      	; 0x2082 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	31 c0       	rjmp	.+98     	; 0x20e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2082:	19 82       	std	Y+1, r1	; 0x01
    2084:	2f c0       	rjmp	.+94     	; 0x20e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2086:	e3 e3       	ldi	r30, 0x33	; 51
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a9 01       	movw	r20, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <GPIO_readPin+0xde>
    209a:	55 95       	asr	r21
    209c:	47 95       	ror	r20
    209e:	8a 95       	dec	r24
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <GPIO_readPin+0xda>
    20a2:	ca 01       	movw	r24, r20
    20a4:	81 70       	andi	r24, 0x01	; 1
    20a6:	90 70       	andi	r25, 0x00	; 0
    20a8:	88 23       	and	r24, r24
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	19 c0       	rjmp	.+50     	; 0x20e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20b2:	19 82       	std	Y+1, r1	; 0x01
    20b4:	17 c0       	rjmp	.+46     	; 0x20e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20b6:	e0 e3       	ldi	r30, 0x30	; 48
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <GPIO_readPin+0x10e>
    20ca:	55 95       	asr	r21
    20cc:	47 95       	ror	r20
    20ce:	8a 95       	dec	r24
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <GPIO_readPin+0x10a>
    20d2:	ca 01       	movw	r24, r20
    20d4:	81 70       	andi	r24, 0x01	; 1
    20d6:	90 70       	andi	r25, 0x00	; 0
    20d8:	88 23       	and	r24, r24
    20da:	19 f0       	breq	.+6      	; 0x20e2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20e2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <GPIO_setupPortDirection+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <GPIO_setupPortDirection+0x8>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	84 30       	cpi	r24, 0x04	; 4
    210a:	90 f5       	brcc	.+100    	; 0x2170 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	3c 83       	std	Y+4, r19	; 0x04
    2114:	2b 83       	std	Y+3, r18	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	91 05       	cpc	r25, r1
    211e:	d1 f0       	breq	.+52     	; 0x2154 <GPIO_setupPortDirection+0x5e>
    2120:	2b 81       	ldd	r18, Y+3	; 0x03
    2122:	3c 81       	ldd	r19, Y+4	; 0x04
    2124:	22 30       	cpi	r18, 0x02	; 2
    2126:	31 05       	cpc	r19, r1
    2128:	2c f4       	brge	.+10     	; 0x2134 <GPIO_setupPortDirection+0x3e>
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	61 f0       	breq	.+24     	; 0x214a <GPIO_setupPortDirection+0x54>
    2132:	1e c0       	rjmp	.+60     	; 0x2170 <GPIO_setupPortDirection+0x7a>
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	81 f0       	breq	.+32     	; 0x215e <GPIO_setupPortDirection+0x68>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	91 05       	cpc	r25, r1
    2146:	81 f0       	breq	.+32     	; 0x2168 <GPIO_setupPortDirection+0x72>
    2148:	13 c0       	rjmp	.+38     	; 0x2170 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    214a:	ea e3       	ldi	r30, 0x3A	; 58
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	80 83       	st	Z, r24
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2154:	e7 e3       	ldi	r30, 0x37	; 55
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	80 83       	st	Z, r24
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    215e:	e4 e3       	ldi	r30, 0x34	; 52
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	80 83       	st	Z, r24
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2168:	e1 e3       	ldi	r30, 0x31	; 49
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	00 d0       	rcall	.+0      	; 0x2184 <GPIO_writePort+0x6>
    2184:	00 d0       	rcall	.+0      	; 0x2186 <GPIO_writePort+0x8>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	84 30       	cpi	r24, 0x04	; 4
    2192:	90 f5       	brcc	.+100    	; 0x21f8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	3c 83       	std	Y+4, r19	; 0x04
    219c:	2b 83       	std	Y+3, r18	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	91 05       	cpc	r25, r1
    21a6:	d1 f0       	breq	.+52     	; 0x21dc <GPIO_writePort+0x5e>
    21a8:	2b 81       	ldd	r18, Y+3	; 0x03
    21aa:	3c 81       	ldd	r19, Y+4	; 0x04
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	2c f4       	brge	.+10     	; 0x21bc <GPIO_writePort+0x3e>
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	61 f0       	breq	.+24     	; 0x21d2 <GPIO_writePort+0x54>
    21ba:	1e c0       	rjmp	.+60     	; 0x21f8 <GPIO_writePort+0x7a>
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	81 f0       	breq	.+32     	; 0x21e6 <GPIO_writePort+0x68>
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	83 30       	cpi	r24, 0x03	; 3
    21cc:	91 05       	cpc	r25, r1
    21ce:	81 f0       	breq	.+32     	; 0x21f0 <GPIO_writePort+0x72>
    21d0:	13 c0       	rjmp	.+38     	; 0x21f8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21d2:	eb e3       	ldi	r30, 0x3B	; 59
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	80 83       	st	Z, r24
    21da:	0e c0       	rjmp	.+28     	; 0x21f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21dc:	e8 e3       	ldi	r30, 0x38	; 56
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	80 83       	st	Z, r24
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21e6:	e5 e3       	ldi	r30, 0x35	; 53
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 83       	st	Z, r24
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21f0:	e2 e3       	ldi	r30, 0x32	; 50
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <GPIO_readPort+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <GPIO_readPort+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2214:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	84 30       	cpi	r24, 0x04	; 4
    221a:	90 f5       	brcc	.+100    	; 0x2280 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3c 83       	std	Y+4, r19	; 0x04
    2224:	2b 83       	std	Y+3, r18	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	91 05       	cpc	r25, r1
    222e:	d1 f0       	breq	.+52     	; 0x2264 <GPIO_readPort+0x5e>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	22 30       	cpi	r18, 0x02	; 2
    2236:	31 05       	cpc	r19, r1
    2238:	2c f4       	brge	.+10     	; 0x2244 <GPIO_readPort+0x3e>
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	61 f0       	breq	.+24     	; 0x225a <GPIO_readPort+0x54>
    2242:	1e c0       	rjmp	.+60     	; 0x2280 <GPIO_readPort+0x7a>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	81 f0       	breq	.+32     	; 0x226e <GPIO_readPort+0x68>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	83 30       	cpi	r24, 0x03	; 3
    2254:	91 05       	cpc	r25, r1
    2256:	81 f0       	breq	.+32     	; 0x2278 <GPIO_readPort+0x72>
    2258:	13 c0       	rjmp	.+38     	; 0x2280 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    225a:	e9 e3       	ldi	r30, 0x39	; 57
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	0e c0       	rjmp	.+28     	; 0x2280 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2264:	e6 e3       	ldi	r30, 0x36	; 54
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	09 c0       	rjmp	.+18     	; 0x2280 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    226e:	e3 e3       	ldi	r30, 0x33	; 51
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2278:	e0 e3       	ldi	r30, 0x30	; 48
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <KEYPAD_getPressedKey+0x6>
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    229c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    229e:	1b 82       	std	Y+3, r1	; 0x03
    22a0:	43 c0       	rjmp	.+134    	; 0x2328 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	98 2f       	mov	r25, r24
    22ae:	9c 5f       	subi	r25, 0xFC	; 252
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	69 2f       	mov	r22, r25
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 01       	movw	r18, r24
    22c2:	2c 5f       	subi	r18, 0xFC	; 252
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <KEYPAD_getPressedKey+0x40>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	2a 95       	dec	r18
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <KEYPAD_getPressedKey+0x3c>
    22d4:	80 95       	com	r24
    22d6:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	69 81       	ldd	r22, Y+1	; 0x01
    22dc:	0e 94 bf 10 	call	0x217e	; 0x217e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22e0:	1a 82       	std	Y+2, r1	; 0x02
    22e2:	1c c0       	rjmp	.+56     	; 0x231c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	6a 81       	ldd	r22, Y+2	; 0x02
    22e8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <GPIO_readPin>
    22ec:	88 23       	and	r24, r24
    22ee:	99 f4       	brne	.+38     	; 0x2316 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	98 2f       	mov	r25, r24
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	89 0f       	add	r24, r25
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	0e 94 99 11 	call	0x2332	; 0x2332 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	84 30       	cpi	r24, 0x04	; 4
    2320:	08 f3       	brcs	.-62     	; 0x22e4 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	84 30       	cpi	r24, 0x04	; 4
    232c:	08 f4       	brcc	.+2      	; 0x2330 <KEYPAD_getPressedKey+0xa0>
    232e:	b9 cf       	rjmp	.-142    	; 0x22a2 <KEYPAD_getPressedKey+0x12>
    2330:	b6 cf       	rjmp	.-148    	; 0x229e <KEYPAD_getPressedKey+0xe>

00002332 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2338:	00 d0       	rcall	.+0      	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x8>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2340:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3c 83       	std	Y+4, r19	; 0x04
    234a:	2b 83       	std	Y+3, r18	; 0x03
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	88 30       	cpi	r24, 0x08	; 8
    2352:	91 05       	cpc	r25, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2356:	70 c0       	rjmp	.+224    	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	29 30       	cpi	r18, 0x09	; 9
    235e:	31 05       	cpc	r19, r1
    2360:	5c f5       	brge	.+86     	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	84 30       	cpi	r24, 0x04	; 4
    2368:	91 05       	cpc	r25, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    236c:	59 c0       	rjmp	.+178    	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0xee>
    236e:	2b 81       	ldd	r18, Y+3	; 0x03
    2370:	3c 81       	ldd	r19, Y+4	; 0x04
    2372:	25 30       	cpi	r18, 0x05	; 5
    2374:	31 05       	cpc	r19, r1
    2376:	9c f4       	brge	.+38     	; 0x239e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	91 05       	cpc	r25, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2382:	48 c0       	rjmp	.+144    	; 0x2414 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2384:	2b 81       	ldd	r18, Y+3	; 0x03
    2386:	3c 81       	ldd	r19, Y+4	; 0x04
    2388:	23 30       	cpi	r18, 0x03	; 3
    238a:	31 05       	cpc	r19, r1
    238c:	0c f0       	brlt	.+2      	; 0x2390 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    238e:	45 c0       	rjmp	.+138    	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	91 05       	cpc	r25, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    239a:	39 c0       	rjmp	.+114    	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    239c:	67 c0       	rjmp	.+206    	; 0x246c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	26 30       	cpi	r18, 0x06	; 6
    23a4:	31 05       	cpc	r19, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <KEYPAD_4x4_adjustKeyNumber+0x78>
    23a8:	41 c0       	rjmp	.+130    	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	87 30       	cpi	r24, 0x07	; 7
    23b0:	91 05       	cpc	r25, r1
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    23b4:	3e c0       	rjmp	.+124    	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23b6:	37 c0       	rjmp	.+110    	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23b8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ba:	3c 81       	ldd	r19, Y+4	; 0x04
    23bc:	2c 30       	cpi	r18, 0x0C	; 12
    23be:	31 05       	cpc	r19, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    23c2:	46 c0       	rjmp	.+140    	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	8d 30       	cpi	r24, 0x0D	; 13
    23ca:	91 05       	cpc	r25, r1
    23cc:	5c f4       	brge	.+22     	; 0x23e4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	2a 30       	cpi	r18, 0x0A	; 10
    23d4:	31 05       	cpc	r19, r1
    23d6:	b1 f1       	breq	.+108    	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	8b 30       	cpi	r24, 0x0B	; 11
    23de:	91 05       	cpc	r25, r1
    23e0:	a4 f5       	brge	.+104    	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0x118>
    23e2:	2d c0       	rjmp	.+90     	; 0x243e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23e4:	2b 81       	ldd	r18, Y+3	; 0x03
    23e6:	3c 81       	ldd	r19, Y+4	; 0x04
    23e8:	2e 30       	cpi	r18, 0x0E	; 14
    23ea:	31 05       	cpc	r19, r1
    23ec:	b9 f1       	breq	.+110    	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	8e 30       	cpi	r24, 0x0E	; 14
    23f4:	91 05       	cpc	r25, r1
    23f6:	7c f1       	brlt	.+94     	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23f8:	2b 81       	ldd	r18, Y+3	; 0x03
    23fa:	3c 81       	ldd	r19, Y+4	; 0x04
    23fc:	2f 30       	cpi	r18, 0x0F	; 15
    23fe:	31 05       	cpc	r19, r1
    2400:	79 f1       	breq	.+94     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	80 31       	cpi	r24, 0x10	; 16
    2408:	91 05       	cpc	r25, r1
    240a:	69 f1       	breq	.+90     	; 0x2466 <KEYPAD_4x4_adjustKeyNumber+0x134>
    240c:	2f c0       	rjmp	.+94     	; 0x246c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    240e:	87 e0       	ldi	r24, 0x07	; 7
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	2e c0       	rjmp	.+92     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2414:	88 e0       	ldi	r24, 0x08	; 8
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	2b c0       	rjmp	.+86     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    241a:	89 e0       	ldi	r24, 0x09	; 9
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	28 c0       	rjmp	.+80     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2420:	85 e2       	ldi	r24, 0x25	; 37
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	25 c0       	rjmp	.+74     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	22 c0       	rjmp	.+68     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    242c:	85 e0       	ldi	r24, 0x05	; 5
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	1f c0       	rjmp	.+62     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2432:	86 e0       	ldi	r24, 0x06	; 6
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	1c c0       	rjmp	.+56     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2438:	8a e2       	ldi	r24, 0x2A	; 42
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	19 c0       	rjmp	.+50     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	16 c0       	rjmp	.+44     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	13 c0       	rjmp	.+38     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	10 c0       	rjmp	.+32     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2450:	8d e2       	ldi	r24, 0x2D	; 45
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2456:	8d e0       	ldi	r24, 0x0D	; 13
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	0a c0       	rjmp	.+20     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    245c:	19 82       	std	Y+1, r1	; 0x01
    245e:	08 c0       	rjmp	.+16     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2460:	8d e3       	ldi	r24, 0x3D	; 61
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2466:	8b e2       	ldi	r24, 0x2B	; 43
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
}
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	6f ef       	ldi	r22, 0xFF	; 255
    24aa:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    24ae:	88 e3       	ldi	r24, 0x38	; 56
    24b0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    24b4:	8c e0       	ldi	r24, 0x0C	; 12
    24b6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_sendCommand>
}
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	e9 97       	sbiw	r28, 0x39	; 57
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	61 e0       	ldi	r22, 0x01	; 1
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e8       	ldi	r26, 0x80	; 128
    24f6:	bf e3       	ldi	r27, 0x3F	; 63
    24f8:	8d ab       	std	Y+53, r24	; 0x35
    24fa:	9e ab       	std	Y+54, r25	; 0x36
    24fc:	af ab       	std	Y+55, r26	; 0x37
    24fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	6d a9       	ldd	r22, Y+53	; 0x35
    2502:	7e a9       	ldd	r23, Y+54	; 0x36
    2504:	8f a9       	ldd	r24, Y+55	; 0x37
    2506:	98 ad       	ldd	r25, Y+56	; 0x38
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a ef       	ldi	r20, 0xFA	; 250
    250e:	54 e4       	ldi	r21, 0x44	; 68
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	89 ab       	std	Y+49, r24	; 0x31
    251a:	9a ab       	std	Y+50, r25	; 0x32
    251c:	ab ab       	std	Y+51, r26	; 0x33
    251e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2520:	69 a9       	ldd	r22, Y+49	; 0x31
    2522:	7a a9       	ldd	r23, Y+50	; 0x32
    2524:	8b a9       	ldd	r24, Y+51	; 0x33
    2526:	9c a9       	ldd	r25, Y+52	; 0x34
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	98 ab       	std	Y+48, r25	; 0x30
    253e:	8f a7       	std	Y+47, r24	; 0x2f
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2542:	69 a9       	ldd	r22, Y+49	; 0x31
    2544:	7a a9       	ldd	r23, Y+50	; 0x32
    2546:	8b a9       	ldd	r24, Y+51	; 0x33
    2548:	9c a9       	ldd	r25, Y+52	; 0x34
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	6d a9       	ldd	r22, Y+53	; 0x35
    255c:	7e a9       	ldd	r23, Y+54	; 0x36
    255e:	8f a9       	ldd	r24, Y+55	; 0x37
    2560:	98 ad       	ldd	r25, Y+56	; 0x38
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	98 ab       	std	Y+48, r25	; 0x30
    2580:	8f a7       	std	Y+47, r24	; 0x2f
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_sendCommand+0xdc>
    2584:	88 ec       	ldi	r24, 0xC8	; 200
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e a7       	std	Y+46, r25	; 0x2e
    258a:	8d a7       	std	Y+45, r24	; 0x2d
    258c:	8d a5       	ldd	r24, Y+45	; 0x2d
    258e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_sendCommand+0xca>
    2594:	9e a7       	std	Y+46, r25	; 0x2e
    2596:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8f a5       	ldd	r24, Y+47	; 0x2f
    259a:	98 a9       	ldd	r25, Y+48	; 0x30
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	98 ab       	std	Y+48, r25	; 0x30
    25a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a4:	98 a9       	ldd	r25, Y+48	; 0x30
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_sendCommand+0xbe>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	69 a9       	ldd	r22, Y+49	; 0x31
    25ae:	7a a9       	ldd	r23, Y+50	; 0x32
    25b0:	8b a9       	ldd	r24, Y+51	; 0x33
    25b2:	9c a9       	ldd	r25, Y+52	; 0x34
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	98 ab       	std	Y+48, r25	; 0x30
    25be:	8f a7       	std	Y+47, r24	; 0x2f
    25c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c2:	98 a9       	ldd	r25, Y+48	; 0x30
    25c4:	9c a7       	std	Y+44, r25	; 0x2c
    25c6:	8b a7       	std	Y+43, r24	; 0x2b
    25c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_sendCommand+0x106>
    25d0:	9c a7       	std	Y+44, r25	; 0x2c
    25d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	62 e0       	ldi	r22, 0x02	; 2
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e8       	ldi	r26, 0x80	; 128
    25e4:	bf e3       	ldi	r27, 0x3F	; 63
    25e6:	8f a3       	std	Y+39, r24	; 0x27
    25e8:	98 a7       	std	Y+40, r25	; 0x28
    25ea:	a9 a7       	std	Y+41, r26	; 0x29
    25ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6f a1       	ldd	r22, Y+39	; 0x27
    25f0:	78 a5       	ldd	r23, Y+40	; 0x28
    25f2:	89 a5       	ldd	r24, Y+41	; 0x29
    25f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8b a3       	std	Y+35, r24	; 0x23
    2608:	9c a3       	std	Y+36, r25	; 0x24
    260a:	ad a3       	std	Y+37, r26	; 0x25
    260c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    260e:	6b a1       	ldd	r22, Y+35	; 0x23
    2610:	7c a1       	ldd	r23, Y+36	; 0x24
    2612:	8d a1       	ldd	r24, Y+37	; 0x25
    2614:	9e a1       	ldd	r25, Y+38	; 0x26
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9a a3       	std	Y+34, r25	; 0x22
    262c:	89 a3       	std	Y+33, r24	; 0x21
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2630:	6b a1       	ldd	r22, Y+35	; 0x23
    2632:	7c a1       	ldd	r23, Y+36	; 0x24
    2634:	8d a1       	ldd	r24, Y+37	; 0x25
    2636:	9e a1       	ldd	r25, Y+38	; 0x26
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6f a1       	ldd	r22, Y+39	; 0x27
    264a:	78 a5       	ldd	r23, Y+40	; 0x28
    264c:	89 a5       	ldd	r24, Y+41	; 0x29
    264e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_sendCommand+0x1ca>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	98 a3       	std	Y+32, r25	; 0x20
    2678:	8f 8f       	std	Y+31, r24	; 0x1f
    267a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    267c:	98 a1       	ldd	r25, Y+32	; 0x20
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_sendCommand+0x1b8>
    2682:	98 a3       	std	Y+32, r25	; 0x20
    2684:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9a a3       	std	Y+34, r25	; 0x22
    268e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	89 a1       	ldd	r24, Y+33	; 0x21
    2692:	9a a1       	ldd	r25, Y+34	; 0x22
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <LCD_sendCommand+0x1ac>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	6b a1       	ldd	r22, Y+35	; 0x23
    269c:	7c a1       	ldd	r23, Y+36	; 0x24
    269e:	8d a1       	ldd	r24, Y+37	; 0x25
    26a0:	9e a1       	ldd	r25, Y+38	; 0x26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9a a3       	std	Y+34, r25	; 0x22
    26ac:	89 a3       	std	Y+33, r24	; 0x21
    26ae:	89 a1       	ldd	r24, Y+33	; 0x21
    26b0:	9a a1       	ldd	r25, Y+34	; 0x22
    26b2:	9e 8f       	std	Y+30, r25	; 0x1e
    26b4:	8d 8f       	std	Y+29, r24	; 0x1d
    26b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_sendCommand+0x1f4>
    26be:	9e 8f       	std	Y+30, r25	; 0x1e
    26c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	69 ad       	ldd	r22, Y+57	; 0x39
    26c6:	0e 94 bf 10 	call	0x217e	; 0x217e <GPIO_writePort>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e8       	ldi	r26, 0x80	; 128
    26d0:	bf e3       	ldi	r27, 0x3F	; 63
    26d2:	89 8f       	std	Y+25, r24	; 0x19
    26d4:	9a 8f       	std	Y+26, r25	; 0x1a
    26d6:	ab 8f       	std	Y+27, r26	; 0x1b
    26d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	69 8d       	ldd	r22, Y+25	; 0x19
    26dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a ef       	ldi	r20, 0xFA	; 250
    26e8:	54 e4       	ldi	r21, 0x44	; 68
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8d 8b       	std	Y+21, r24	; 0x15
    26f4:	9e 8b       	std	Y+22, r25	; 0x16
    26f6:	af 8b       	std	Y+23, r26	; 0x17
    26f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	2c f4       	brge	.+10     	; 0x271c <LCD_sendCommand+0x256>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 8b       	std	Y+20, r25	; 0x14
    2718:	8b 8b       	std	Y+19, r24	; 0x13
    271a:	3f c0       	rjmp	.+126    	; 0x279a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    271c:	6d 89       	ldd	r22, Y+21	; 0x15
    271e:	7e 89       	ldd	r23, Y+22	; 0x16
    2720:	8f 89       	ldd	r24, Y+23	; 0x17
    2722:	98 8d       	ldd	r25, Y+24	; 0x18
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	4c f5       	brge	.+82     	; 0x2786 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2734:	69 8d       	ldd	r22, Y+25	; 0x19
    2736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e2       	ldi	r20, 0x20	; 32
    2742:	51 e4       	ldi	r21, 0x41	; 65
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	0f c0       	rjmp	.+30     	; 0x277c <LCD_sendCommand+0x2b6>
    275e:	88 ec       	ldi	r24, 0xC8	; 200
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9a 8b       	std	Y+18, r25	; 0x12
    2764:	89 8b       	std	Y+17, r24	; 0x11
    2766:	89 89       	ldd	r24, Y+17	; 0x11
    2768:	9a 89       	ldd	r25, Y+18	; 0x12
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_sendCommand+0x2a4>
    276e:	9a 8b       	std	Y+18, r25	; 0x12
    2770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	8b 89       	ldd	r24, Y+19	; 0x13
    277e:	9c 89       	ldd	r25, Y+20	; 0x14
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	69 f7       	brne	.-38     	; 0x275e <LCD_sendCommand+0x298>
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	6d 89       	ldd	r22, Y+21	; 0x15
    2788:	7e 89       	ldd	r23, Y+22	; 0x16
    278a:	8f 89       	ldd	r24, Y+23	; 0x17
    278c:	98 8d       	ldd	r25, Y+24	; 0x18
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
    279a:	8b 89       	ldd	r24, Y+19	; 0x13
    279c:	9c 89       	ldd	r25, Y+20	; 0x14
    279e:	98 8b       	std	Y+16, r25	; 0x10
    27a0:	8f 87       	std	Y+15, r24	; 0x0f
    27a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a4:	98 89       	ldd	r25, Y+16	; 0x10
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_sendCommand+0x2e0>
    27aa:	98 8b       	std	Y+16, r25	; 0x10
    27ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	62 e0       	ldi	r22, 0x02	; 2
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a0 e8       	ldi	r26, 0x80	; 128
    27be:	bf e3       	ldi	r27, 0x3F	; 63
    27c0:	8b 87       	std	Y+11, r24	; 0x0b
    27c2:	9c 87       	std	Y+12, r25	; 0x0c
    27c4:	ad 87       	std	Y+13, r26	; 0x0d
    27c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    27cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a ef       	ldi	r20, 0xFA	; 250
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8f 83       	std	Y+7, r24	; 0x07
    27e2:	98 87       	std	Y+8, r25	; 0x08
    27e4:	a9 87       	std	Y+9, r26	; 0x09
    27e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <LCD_sendCommand+0x344>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6b 85       	ldd	r22, Y+11	; 0x0b
    2824:	7c 85       	ldd	r23, Y+12	; 0x0c
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	9e 85       	ldd	r25, Y+14	; 0x0e
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	0f c0       	rjmp	.+30     	; 0x286a <LCD_sendCommand+0x3a4>
    284c:	88 ec       	ldi	r24, 0xC8	; 200
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_sendCommand+0x392>
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <LCD_sendCommand+0x386>
    2872:	14 c0       	rjmp	.+40     	; 0x289c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_sendCommand+0x3ce>
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    289c:	e9 96       	adiw	r28, 0x39	; 57
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	e9 97       	sbiw	r28, 0x39	; 57
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	41 e0       	ldi	r20, 0x01	; 1
    28ca:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	8d ab       	std	Y+53, r24	; 0x35
    28e2:	9e ab       	std	Y+54, r25	; 0x36
    28e4:	af ab       	std	Y+55, r26	; 0x37
    28e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ea:	7e a9       	ldd	r23, Y+54	; 0x36
    28ec:	8f a9       	ldd	r24, Y+55	; 0x37
    28ee:	98 ad       	ldd	r25, Y+56	; 0x38
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	89 ab       	std	Y+49, r24	; 0x31
    2902:	9a ab       	std	Y+50, r25	; 0x32
    2904:	ab ab       	std	Y+51, r26	; 0x33
    2906:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2908:	69 a9       	ldd	r22, Y+49	; 0x31
    290a:	7a a9       	ldd	r23, Y+50	; 0x32
    290c:	8b a9       	ldd	r24, Y+51	; 0x33
    290e:	9c a9       	ldd	r25, Y+52	; 0x34
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    292a:	69 a9       	ldd	r22, Y+49	; 0x31
    292c:	7a a9       	ldd	r23, Y+50	; 0x32
    292e:	8b a9       	ldd	r24, Y+51	; 0x33
    2930:	9c a9       	ldd	r25, Y+52	; 0x34
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6d a9       	ldd	r22, Y+53	; 0x35
    2944:	7e a9       	ldd	r23, Y+54	; 0x36
    2946:	8f a9       	ldd	r24, Y+55	; 0x37
    2948:	98 ad       	ldd	r25, Y+56	; 0x38
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_displayCharacter+0xdc>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e a7       	std	Y+46, r25	; 0x2e
    2972:	8d a7       	std	Y+45, r24	; 0x2d
    2974:	8d a5       	ldd	r24, Y+45	; 0x2d
    2976:	9e a5       	ldd	r25, Y+46	; 0x2e
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_displayCharacter+0xca>
    297c:	9e a7       	std	Y+46, r25	; 0x2e
    297e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8f a5       	ldd	r24, Y+47	; 0x2f
    2982:	98 a9       	ldd	r25, Y+48	; 0x30
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	98 ab       	std	Y+48, r25	; 0x30
    2988:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8f a5       	ldd	r24, Y+47	; 0x2f
    298c:	98 a9       	ldd	r25, Y+48	; 0x30
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_displayCharacter+0xbe>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	69 a9       	ldd	r22, Y+49	; 0x31
    2996:	7a a9       	ldd	r23, Y+50	; 0x32
    2998:	8b a9       	ldd	r24, Y+51	; 0x33
    299a:	9c a9       	ldd	r25, Y+52	; 0x34
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	98 ab       	std	Y+48, r25	; 0x30
    29a6:	8f a7       	std	Y+47, r24	; 0x2f
    29a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29aa:	98 a9       	ldd	r25, Y+48	; 0x30
    29ac:	9c a7       	std	Y+44, r25	; 0x2c
    29ae:	8b a7       	std	Y+43, r24	; 0x2b
    29b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_displayCharacter+0x106>
    29b8:	9c a7       	std	Y+44, r25	; 0x2c
    29ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 e8       	ldi	r26, 0x80	; 128
    29cc:	bf e3       	ldi	r27, 0x3F	; 63
    29ce:	8f a3       	std	Y+39, r24	; 0x27
    29d0:	98 a7       	std	Y+40, r25	; 0x28
    29d2:	a9 a7       	std	Y+41, r26	; 0x29
    29d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6f a1       	ldd	r22, Y+39	; 0x27
    29d8:	78 a5       	ldd	r23, Y+40	; 0x28
    29da:	89 a5       	ldd	r24, Y+41	; 0x29
    29dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8b a3       	std	Y+35, r24	; 0x23
    29f0:	9c a3       	std	Y+36, r25	; 0x24
    29f2:	ad a3       	std	Y+37, r26	; 0x25
    29f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29f6:	6b a1       	ldd	r22, Y+35	; 0x23
    29f8:	7c a1       	ldd	r23, Y+36	; 0x24
    29fa:	8d a1       	ldd	r24, Y+37	; 0x25
    29fc:	9e a1       	ldd	r25, Y+38	; 0x26
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6f a1       	ldd	r22, Y+39	; 0x27
    2a32:	78 a5       	ldd	r23, Y+40	; 0x28
    2a34:	89 a5       	ldd	r24, Y+41	; 0x29
    2a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <LCD_displayCharacter+0x1ca>
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	98 a3       	std	Y+32, r25	; 0x20
    2a60:	8f 8f       	std	Y+31, r24	; 0x1f
    2a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a64:	98 a1       	ldd	r25, Y+32	; 0x20
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_displayCharacter+0x1b8>
    2a6a:	98 a3       	std	Y+32, r25	; 0x20
    2a6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <LCD_displayCharacter+0x1ac>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6b a1       	ldd	r22, Y+35	; 0x23
    2a84:	7c a1       	ldd	r23, Y+36	; 0x24
    2a86:	8d a1       	ldd	r24, Y+37	; 0x25
    2a88:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a a3       	std	Y+34, r25	; 0x22
    2a94:	89 a3       	std	Y+33, r24	; 0x21
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_displayCharacter+0x1f4>
    2aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	69 ad       	ldd	r22, Y+57	; 0x39
    2aae:	0e 94 bf 10 	call	0x217e	; 0x217e <GPIO_writePort>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e8       	ldi	r26, 0x80	; 128
    2ab8:	bf e3       	ldi	r27, 0x3F	; 63
    2aba:	89 8f       	std	Y+25, r24	; 0x19
    2abc:	9a 8f       	std	Y+26, r25	; 0x1a
    2abe:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a ef       	ldi	r20, 0xFA	; 250
    2ad0:	54 e4       	ldi	r21, 0x44	; 68
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	8d 8b       	std	Y+21, r24	; 0x15
    2adc:	9e 8b       	std	Y+22, r25	; 0x16
    2ade:	af 8b       	std	Y+23, r26	; 0x17
    2ae0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	2c f4       	brge	.+10     	; 0x2b04 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9c 8b       	std	Y+20, r25	; 0x14
    2b00:	8b 8b       	std	Y+19, r24	; 0x13
    2b02:	3f c0       	rjmp	.+126    	; 0x2b82 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	3f ef       	ldi	r19, 0xFF	; 255
    2b10:	4f e7       	ldi	r20, 0x7F	; 127
    2b12:	57 e4       	ldi	r21, 0x47	; 71
    2b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b18:	18 16       	cp	r1, r24
    2b1a:	4c f5       	brge	.+82     	; 0x2b6e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <LCD_displayCharacter+0x2b6>
    2b46:	88 ec       	ldi	r24, 0xC8	; 200
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9a 8b       	std	Y+18, r25	; 0x12
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	9a 89       	ldd	r25, Y+18	; 0x12
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <LCD_displayCharacter+0x2a4>
    2b56:	9a 8b       	std	Y+18, r25	; 0x12
    2b58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	69 f7       	brne	.-38     	; 0x2b46 <LCD_displayCharacter+0x298>
    2b6c:	14 c0       	rjmp	.+40     	; 0x2b96 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b70:	7e 89       	ldd	r23, Y+22	; 0x16
    2b72:	8f 89       	ldd	r24, Y+23	; 0x17
    2b74:	98 8d       	ldd	r25, Y+24	; 0x18
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	98 8b       	std	Y+16, r25	; 0x10
    2b88:	8f 87       	std	Y+15, r24	; 0x0f
    2b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8c:	98 89       	ldd	r25, Y+16	; 0x10
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_displayCharacter+0x2e0>
    2b92:	98 8b       	std	Y+16, r25	; 0x10
    2b94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	62 e0       	ldi	r22, 0x02	; 2
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <GPIO_writePin>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e8       	ldi	r26, 0x80	; 128
    2ba6:	bf e3       	ldi	r27, 0x3F	; 63
    2ba8:	8b 87       	std	Y+11, r24	; 0x0b
    2baa:	9c 87       	std	Y+12, r25	; 0x0c
    2bac:	ad 87       	std	Y+13, r26	; 0x0d
    2bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	4a ef       	ldi	r20, 0xFA	; 250
    2bbe:	54 e4       	ldi	r21, 0x44	; 68
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8f 83       	std	Y+7, r24	; 0x07
    2bca:	98 87       	std	Y+8, r25	; 0x08
    2bcc:	a9 87       	std	Y+9, r26	; 0x09
    2bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	5f e3       	ldi	r21, 0x3F	; 63
    2be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be4:	88 23       	and	r24, r24
    2be6:	2c f4       	brge	.+10     	; 0x2bf2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	3f c0       	rjmp	.+126    	; 0x2c70 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf4:	78 85       	ldd	r23, Y+8	; 0x08
    2bf6:	89 85       	ldd	r24, Y+9	; 0x09
    2bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	4c f5       	brge	.+82     	; 0x2c5c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	51 e4       	ldi	r21, 0x41	; 65
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9e 83       	std	Y+6, r25	; 0x06
    2c30:	8d 83       	std	Y+5, r24	; 0x05
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <LCD_displayCharacter+0x3a4>
    2c34:	88 ec       	ldi	r24, 0xC8	; 200
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <LCD_displayCharacter+0x392>
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <LCD_displayCharacter+0x386>
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5e:	78 85       	ldd	r23, Y+8	; 0x08
    2c60:	89 85       	ldd	r24, Y+9	; 0x09
    2c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <LCD_displayCharacter+0x3ce>
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2c84:	e9 96       	adiw	r28, 0x39	; 57
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <LCD_displayString+0x6>
    2c9c:	0f 92       	push	r0
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9b 83       	std	Y+3, r25	; 0x03
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ca6:	19 82       	std	Y+1, r1	; 0x01
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	80 81       	ld	r24, Z
    2cbc:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_displayCharacter>
		i++;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	39 f7       	brne	.-50     	; 0x2caa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <LCD_moveCursor+0x6>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <LCD_moveCursor+0x8>
    2cf0:	0f 92       	push	r0
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	8a 83       	std	Y+2, r24	; 0x02
    2cf8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	3d 83       	std	Y+5, r19	; 0x05
    2d02:	2c 83       	std	Y+4, r18	; 0x04
    2d04:	8c 81       	ldd	r24, Y+4	; 0x04
    2d06:	9d 81       	ldd	r25, Y+5	; 0x05
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	c1 f0       	breq	.+48     	; 0x2d3e <LCD_moveCursor+0x56>
    2d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d10:	3d 81       	ldd	r19, Y+5	; 0x05
    2d12:	22 30       	cpi	r18, 0x02	; 2
    2d14:	31 05       	cpc	r19, r1
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <LCD_moveCursor+0x3a>
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	61 f0       	breq	.+24     	; 0x2d38 <LCD_moveCursor+0x50>
    2d20:	19 c0       	rjmp	.+50     	; 0x2d54 <LCD_moveCursor+0x6c>
    2d22:	2c 81       	ldd	r18, Y+4	; 0x04
    2d24:	3d 81       	ldd	r19, Y+5	; 0x05
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	69 f0       	breq	.+26     	; 0x2d46 <LCD_moveCursor+0x5e>
    2d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d30:	83 30       	cpi	r24, 0x03	; 3
    2d32:	91 05       	cpc	r25, r1
    2d34:	61 f0       	breq	.+24     	; 0x2d4e <LCD_moveCursor+0x66>
    2d36:	0e c0       	rjmp	.+28     	; 0x2d54 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	0b c0       	rjmp	.+22     	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	80 5c       	subi	r24, 0xC0	; 192
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	80 5f       	subi	r24, 0xF0	; 240
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	80 5b       	subi	r24, 0xB0	; 176
    2d52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	80 68       	ori	r24, 0x80	; 128
    2d58:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_sendCommand>
}
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <LCD_displayStringRowColumn+0x6>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <LCD_displayStringRowColumn+0x8>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	6a 83       	std	Y+2, r22	; 0x02
    2d7c:	5c 83       	std	Y+4, r21	; 0x04
    2d7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	6a 81       	ldd	r22, Y+2	; 0x02
    2d84:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	62 97       	sbiw	r28, 0x12	; 18
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	9a 8b       	std	Y+18, r25	; 0x12
    2db4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2db6:	89 89       	ldd	r24, Y+17	; 0x11
    2db8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dba:	9e 01       	movw	r18, r28
    2dbc:	2f 5f       	subi	r18, 0xFF	; 255
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	4a e0       	ldi	r20, 0x0A	; 10
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2dca:	ce 01       	movw	r24, r28
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
}
    2dd2:	62 96       	adiw	r28, 0x12	; 18
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_sendCommand>
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <TIMER0_OVF>:

/*******************************************************************************
 *                        Interrupt Service Routines                           *
 ******************************************************************************/
ISR(TIMER0_OVF)
{
    2df8:	1f 92       	push	r1
    2dfa:	0f 92       	push	r0
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	0f 92       	push	r0
    2e00:	11 24       	eor	r1, r1
    2e02:	2f 93       	push	r18
    2e04:	3f 93       	push	r19
    2e06:	4f 93       	push	r20
    2e08:	5f 93       	push	r21
    2e0a:	6f 93       	push	r22
    2e0c:	7f 93       	push	r23
    2e0e:	8f 93       	push	r24
    2e10:	9f 93       	push	r25
    2e12:	af 93       	push	r26
    2e14:	bf 93       	push	r27
    2e16:	ef 93       	push	r30
    2e18:	ff 93       	push	r31
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ovf_Ptr != NULL_PTR)
    2e22:	80 91 16 02 	lds	r24, 0x0216
    2e26:	90 91 17 02 	lds	r25, 0x0217
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	29 f0       	breq	.+10     	; 0x2e38 <TIMER0_OVF+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer0_ovf_Ptr)();
    2e2e:	e0 91 16 02 	lds	r30, 0x0216
    2e32:	f0 91 17 02 	lds	r31, 0x0217
    2e36:	09 95       	icall
	}
}
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	bf 91       	pop	r27
    2e42:	af 91       	pop	r26
    2e44:	9f 91       	pop	r25
    2e46:	8f 91       	pop	r24
    2e48:	7f 91       	pop	r23
    2e4a:	6f 91       	pop	r22
    2e4c:	5f 91       	pop	r21
    2e4e:	4f 91       	pop	r20
    2e50:	3f 91       	pop	r19
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	0f 90       	pop	r0
    2e5a:	1f 90       	pop	r1
    2e5c:	18 95       	reti

00002e5e <TIMER2_OVF>:


ISR(TIMER2_OVF)
{
    2e5e:	1f 92       	push	r1
    2e60:	0f 92       	push	r0
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	0f 92       	push	r0
    2e66:	11 24       	eor	r1, r1
    2e68:	2f 93       	push	r18
    2e6a:	3f 93       	push	r19
    2e6c:	4f 93       	push	r20
    2e6e:	5f 93       	push	r21
    2e70:	6f 93       	push	r22
    2e72:	7f 93       	push	r23
    2e74:	8f 93       	push	r24
    2e76:	9f 93       	push	r25
    2e78:	af 93       	push	r26
    2e7a:	bf 93       	push	r27
    2e7c:	ef 93       	push	r30
    2e7e:	ff 93       	push	r31
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_ovf_Ptr != NULL_PTR)
    2e88:	80 91 1a 02 	lds	r24, 0x021A
    2e8c:	90 91 1b 02 	lds	r25, 0x021B
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	29 f0       	breq	.+10     	; 0x2e9e <TIMER2_OVF+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer2_ovf_Ptr)();
    2e94:	e0 91 1a 02 	lds	r30, 0x021A
    2e98:	f0 91 1b 02 	lds	r31, 0x021B
    2e9c:	09 95       	icall
	}
}
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	ff 91       	pop	r31
    2ea4:	ef 91       	pop	r30
    2ea6:	bf 91       	pop	r27
    2ea8:	af 91       	pop	r26
    2eaa:	9f 91       	pop	r25
    2eac:	8f 91       	pop	r24
    2eae:	7f 91       	pop	r23
    2eb0:	6f 91       	pop	r22
    2eb2:	5f 91       	pop	r21
    2eb4:	4f 91       	pop	r20
    2eb6:	3f 91       	pop	r19
    2eb8:	2f 91       	pop	r18
    2eba:	0f 90       	pop	r0
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	0f 90       	pop	r0
    2ec0:	1f 90       	pop	r1
    2ec2:	18 95       	reti

00002ec4 <TIMER0_COMP>:

ISR(TIMER0_COMP)
{
    2ec4:	1f 92       	push	r1
    2ec6:	0f 92       	push	r0
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	0f 92       	push	r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	2f 93       	push	r18
    2ed0:	3f 93       	push	r19
    2ed2:	4f 93       	push	r20
    2ed4:	5f 93       	push	r21
    2ed6:	6f 93       	push	r22
    2ed8:	7f 93       	push	r23
    2eda:	8f 93       	push	r24
    2edc:	9f 93       	push	r25
    2ede:	af 93       	push	r26
    2ee0:	bf 93       	push	r27
    2ee2:	ef 93       	push	r30
    2ee4:	ff 93       	push	r31
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_comp_Ptr != NULL_PTR)
    2eee:	80 91 18 02 	lds	r24, 0x0218
    2ef2:	90 91 19 02 	lds	r25, 0x0219
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	29 f0       	breq	.+10     	; 0x2f04 <TIMER0_COMP+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer0_comp_Ptr)();
    2efa:	e0 91 18 02 	lds	r30, 0x0218
    2efe:	f0 91 19 02 	lds	r31, 0x0219
    2f02:	09 95       	icall
	}
}
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	ff 91       	pop	r31
    2f0a:	ef 91       	pop	r30
    2f0c:	bf 91       	pop	r27
    2f0e:	af 91       	pop	r26
    2f10:	9f 91       	pop	r25
    2f12:	8f 91       	pop	r24
    2f14:	7f 91       	pop	r23
    2f16:	6f 91       	pop	r22
    2f18:	5f 91       	pop	r21
    2f1a:	4f 91       	pop	r20
    2f1c:	3f 91       	pop	r19
    2f1e:	2f 91       	pop	r18
    2f20:	0f 90       	pop	r0
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	0f 90       	pop	r0
    2f26:	1f 90       	pop	r1
    2f28:	18 95       	reti

00002f2a <TIMER2_COMP>:


ISR(TIMER2_COMP)
{
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	4f 93       	push	r20
    2f3a:	5f 93       	push	r21
    2f3c:	6f 93       	push	r22
    2f3e:	7f 93       	push	r23
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	af 93       	push	r26
    2f46:	bf 93       	push	r27
    2f48:	ef 93       	push	r30
    2f4a:	ff 93       	push	r31
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_comp_Ptr != NULL_PTR)
    2f54:	80 91 1c 02 	lds	r24, 0x021C
    2f58:	90 91 1d 02 	lds	r25, 0x021D
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	29 f0       	breq	.+10     	; 0x2f6a <TIMER2_COMP+0x40>
	{
		/* Call the Call Back function in the application */
		(*Timer2_comp_Ptr)();
    2f60:	e0 91 1c 02 	lds	r30, 0x021C
    2f64:	f0 91 1d 02 	lds	r31, 0x021D
    2f68:	09 95       	icall
	}
}
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	ff 91       	pop	r31
    2f70:	ef 91       	pop	r30
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	9f 91       	pop	r25
    2f78:	8f 91       	pop	r24
    2f7a:	7f 91       	pop	r23
    2f7c:	6f 91       	pop	r22
    2f7e:	5f 91       	pop	r21
    2f80:	4f 91       	pop	r20
    2f82:	3f 91       	pop	r19
    2f84:	2f 91       	pop	r18
    2f86:	0f 90       	pop	r0
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	0f 90       	pop	r0
    2f8c:	1f 90       	pop	r1
    2f8e:	18 95       	reti

00002f90 <TIMER0_OVF_setCallBack>:

/*******************************************************************************
 *                         Call-back  Functions Definitions                    *
 ******************************************************************************/
void TIMER0_OVF_setCallBack(void(*a_ptr)(void))
{
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <TIMER0_OVF_setCallBack+0x6>
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	Timer0_ovf_Ptr= a_ptr;
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	90 93 17 02 	sts	0x0217, r25
    2fa6:	80 93 16 02 	sts	0x0216, r24
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <TIMER2_OVF_setCallBack>:

void TIMER2_OVF_setCallBack(void(*a_ptr)(void))
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <TIMER2_OVF_setCallBack+0x6>
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	Timer2_ovf_Ptr= a_ptr;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc6:	90 93 1b 02 	sts	0x021B, r25
    2fca:	80 93 1a 02 	sts	0x021A, r24
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <TIMER0_COMP_setCallBack>:
void TIMER0_COMP_setCallBack(void(*a_ptr)(void))
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <TIMER0_COMP_setCallBack+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	Timer0_comp_Ptr= a_ptr;
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	90 93 19 02 	sts	0x0219, r25
    2fee:	80 93 18 02 	sts	0x0218, r24
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <TIMER2_COMP_setCallBack>:



void TIMER2_COMP_setCallBack(void(*a_ptr)(void))
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <TIMER2_COMP_setCallBack+0x6>
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	9a 83       	std	Y+2, r25	; 0x02
    3008:	89 83       	std	Y+1, r24	; 0x01
	Timer2_comp_Ptr= a_ptr;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	9a 81       	ldd	r25, Y+2	; 0x02
    300e:	90 93 1d 02 	sts	0x021D, r25
    3012:	80 93 1c 02 	sts	0x021C, r24
}
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <TIMER0_init>:
 *******************************************************************************/



void TIMER0_init(TIMER_ConfigType *Config_Ptr)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <TIMER0_init+0x6>
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
	if ((Config_Ptr) -> mode == NORMAL)
    302e:	e9 81       	ldd	r30, Y+1	; 0x01
    3030:	fa 81       	ldd	r31, Y+2	; 0x02
    3032:	81 81       	ldd	r24, Z+1	; 0x01
    3034:	88 23       	and	r24, r24
    3036:	29 f5       	brne	.+74     	; 0x3082 <TIMER0_init+0x62>
	{
		/* To choose pre-scale */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    3038:	a3 e5       	ldi	r26, 0x53	; 83
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e3 e5       	ldi	r30, 0x53	; 83
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	98 2f       	mov	r25, r24
    3044:	98 7f       	andi	r25, 0xF8	; 248
    3046:	e9 81       	ldd	r30, Y+1	; 0x01
    3048:	fa 81       	ldd	r31, Y+2	; 0x02
    304a:	80 81       	ld	r24, Z
    304c:	89 2b       	or	r24, r25
    304e:	8c 93       	st	X, r24
		/* Normal Mode */
		CLEAR_BIT(TCCR0,WGM00);
    3050:	a3 e5       	ldi	r26, 0x53	; 83
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	e3 e5       	ldi	r30, 0x53	; 83
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	8f 7b       	andi	r24, 0xBF	; 191
    305c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    305e:	a3 e5       	ldi	r26, 0x53	; 83
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e3 e5       	ldi	r30, 0x53	; 83
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	87 7f       	andi	r24, 0xF7	; 247
    306a:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    306c:	a2 e5       	ldi	r26, 0x52	; 82
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	e9 81       	ldd	r30, Y+1	; 0x01
    3072:	fa 81       	ldd	r31, Y+2	; 0x02
    3074:	83 81       	ldd	r24, Z+3	; 0x03
    3076:	8c 93       	st	X, r24
		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    3078:	e9 e5       	ldi	r30, 0x59	; 89
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	80 83       	st	Z, r24
    3080:	7a c0       	rjmp	.+244    	; 0x3176 <TIMER0_init+0x156>
	}
	else if (Config_Ptr -> mode == PWM)
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	81 81       	ldd	r24, Z+1	; 0x01
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	c9 f5       	brne	.+114    	; 0x30fe <TIMER0_init+0xde>
	{
		/* To choose pre-scale */
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    308c:	a3 e5       	ldi	r26, 0x53	; 83
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e3 e5       	ldi	r30, 0x53	; 83
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	98 2f       	mov	r25, r24
    3098:	98 7f       	andi	r25, 0xF8	; 248
    309a:	e9 81       	ldd	r30, Y+1	; 0x01
    309c:	fa 81       	ldd	r31, Y+2	; 0x02
    309e:	80 81       	ld	r24, Z
    30a0:	89 2b       	or	r24, r25
    30a2:	8c 93       	st	X, r24
		/* PWM Mode */
		CLEAR_BIT(TCCR0,WGM00);
    30a4:	a3 e5       	ldi	r26, 0x53	; 83
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e3 e5       	ldi	r30, 0x53	; 83
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	8f 7b       	andi	r24, 0xBF	; 191
    30b0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    30b2:	a3 e5       	ldi	r26, 0x53	; 83
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e3 e5       	ldi	r30, 0x53	; 83
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	88 60       	ori	r24, 0x08	; 8
    30be:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    30c0:	a2 e5       	ldi	r26, 0x52	; 82
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	83 81       	ldd	r24, Z+3	; 0x03
    30ca:	8c 93       	st	X, r24
		 *  Clear OC0 on compare match when up-counting. Set OC0 on compare
            match when downcounting.
		 *  Set OC0 on compare match when up-counting. Clear OC0 on compare
            match when downcounting.
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    30cc:	a3 e5       	ldi	r26, 0x53	; 83
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e3 e5       	ldi	r30, 0x53	; 83
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	28 2f       	mov	r18, r24
    30d8:	2f 7c       	andi	r18, 0xCF	; 207
    30da:	e9 81       	ldd	r30, Y+1	; 0x01
    30dc:	fa 81       	ldd	r31, Y+2	; 0x02
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	88 2f       	mov	r24, r24
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	82 95       	swap	r24
    30e6:	92 95       	swap	r25
    30e8:	90 7f       	andi	r25, 0xF0	; 240
    30ea:	98 27       	eor	r25, r24
    30ec:	80 7f       	andi	r24, 0xF0	; 240
    30ee:	98 27       	eor	r25, r24
    30f0:	82 2b       	or	r24, r18
    30f2:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    30f4:	e9 e5       	ldi	r30, 0x59	; 89
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	80 83       	st	Z, r24
    30fc:	3c c0       	rjmp	.+120    	; 0x3176 <TIMER0_init+0x156>
	}
	else if (Config_Ptr -> mode == CTC)
    30fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3100:	fa 81       	ldd	r31, Y+2	; 0x02
    3102:	81 81       	ldd	r24, Z+1	; 0x01
    3104:	82 30       	cpi	r24, 0x02	; 2
    3106:	b9 f5       	brne	.+110    	; 0x3176 <TIMER0_init+0x156>
	{
		/* To choose pre-scale */
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> prescaler);
    3108:	a3 e5       	ldi	r26, 0x53	; 83
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e3 e5       	ldi	r30, 0x53	; 83
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	98 2f       	mov	r25, r24
    3114:	98 7f       	andi	r25, 0xF8	; 248
    3116:	e9 81       	ldd	r30, Y+1	; 0x01
    3118:	fa 81       	ldd	r31, Y+2	; 0x02
    311a:	80 81       	ld	r24, Z
    311c:	89 2b       	or	r24, r25
    311e:	8c 93       	st	X, r24
		/* COMPARE Mode */
		SET_BIT(TCCR0,WGM01);
    3120:	a3 e5       	ldi	r26, 0x53	; 83
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e3 e5       	ldi	r30, 0x53	; 83
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	88 60       	ori	r24, 0x08	; 8
    312c:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT0= Config_Ptr -> value;
    312e:	a2 e5       	ldi	r26, 0x52	; 82
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	83 81       	ldd	r24, Z+3	; 0x03
    3138:	8c 93       	st	X, r24

		 *  Clear OC0 on compare match

		 *  Set OC0 on compare match
		 */
		TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    313a:	a3 e5       	ldi	r26, 0x53	; 83
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e3 e5       	ldi	r30, 0x53	; 83
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	28 2f       	mov	r18, r24
    3146:	2f 7c       	andi	r18, 0xCF	; 207
    3148:	e9 81       	ldd	r30, Y+1	; 0x01
    314a:	fa 81       	ldd	r31, Y+2	; 0x02
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	82 95       	swap	r24
    3154:	92 95       	swap	r25
    3156:	90 7f       	andi	r25, 0xF0	; 240
    3158:	98 27       	eor	r25, r24
    315a:	80 7f       	andi	r24, 0xF0	; 240
    315c:	98 27       	eor	r25, r24
    315e:	82 2b       	or	r24, r18
    3160:	8c 93       	st	X, r24

		/* To choose compare value */
		OCR0= Config_Ptr -> compValue;
    3162:	ac e5       	ldi	r26, 0x5C	; 92
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e9 81       	ldd	r30, Y+1	; 0x01
    3168:	fa 81       	ldd	r31, Y+2	; 0x02
    316a:	84 81       	ldd	r24, Z+4	; 0x04
    316c:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE0);
    316e:	e9 e5       	ldi	r30, 0x59	; 89
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	80 83       	st	Z, r24
	}
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <TIMER0_stop>:

void TIMER0_stop()
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	/* Stop the Timer */
	TCCR0 = 0;
    3188:	e3 e5       	ldi	r30, 0x53	; 83
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	10 82       	st	Z, r1
}
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	08 95       	ret

00003194 <TIMER2_init>:


void TIMER2_init(TIMER_ConfigType *Config_Ptr)
{
    3194:	df 93       	push	r29
    3196:	cf 93       	push	r28
    3198:	00 d0       	rcall	.+0      	; 0x319a <TIMER2_init+0x6>
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr -> mode == NORMAL)
    31a2:	e9 81       	ldd	r30, Y+1	; 0x01
    31a4:	fa 81       	ldd	r31, Y+2	; 0x02
    31a6:	81 81       	ldd	r24, Z+1	; 0x01
    31a8:	88 23       	and	r24, r24
    31aa:	29 f5       	brne	.+74     	; 0x31f6 <TIMER2_init+0x62>
	{
		/* To choose pre-scale */
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    31ac:	a5 e4       	ldi	r26, 0x45	; 69
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e5 e4       	ldi	r30, 0x45	; 69
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	98 2f       	mov	r25, r24
    31b8:	98 7f       	andi	r25, 0xF8	; 248
    31ba:	e9 81       	ldd	r30, Y+1	; 0x01
    31bc:	fa 81       	ldd	r31, Y+2	; 0x02
    31be:	80 81       	ld	r24, Z
    31c0:	89 2b       	or	r24, r25
    31c2:	8c 93       	st	X, r24
		/* Normal Mode */
		CLEAR_BIT(TCCR2,WGM20);
    31c4:	a5 e4       	ldi	r26, 0x45	; 69
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e5 e4       	ldi	r30, 0x45	; 69
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	8f 7b       	andi	r24, 0xBF	; 191
    31d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,WGM21);
    31d2:	a5 e4       	ldi	r26, 0x45	; 69
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e5 e4       	ldi	r30, 0x45	; 69
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	87 7f       	andi	r24, 0xF7	; 247
    31de:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    31e0:	a4 e4       	ldi	r26, 0x44	; 68
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e9 81       	ldd	r30, Y+1	; 0x01
    31e6:	fa 81       	ldd	r31, Y+2	; 0x02
    31e8:	83 81       	ldd	r24, Z+3	; 0x03
    31ea:	8c 93       	st	X, r24
		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    31ec:	e9 e5       	ldi	r30, 0x59	; 89
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 e4       	ldi	r24, 0x40	; 64
    31f2:	80 83       	st	Z, r24
    31f4:	7a c0       	rjmp	.+244    	; 0x32ea <TIMER2_init+0x156>
	}
	else if (Config_Ptr -> mode == PWM)
    31f6:	e9 81       	ldd	r30, Y+1	; 0x01
    31f8:	fa 81       	ldd	r31, Y+2	; 0x02
    31fa:	81 81       	ldd	r24, Z+1	; 0x01
    31fc:	81 30       	cpi	r24, 0x01	; 1
    31fe:	c9 f5       	brne	.+114    	; 0x3272 <TIMER2_init+0xde>
	{
		/* To choose pre-scale */
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    3200:	a5 e4       	ldi	r26, 0x45	; 69
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e5 e4       	ldi	r30, 0x45	; 69
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	98 2f       	mov	r25, r24
    320c:	98 7f       	andi	r25, 0xF8	; 248
    320e:	e9 81       	ldd	r30, Y+1	; 0x01
    3210:	fa 81       	ldd	r31, Y+2	; 0x02
    3212:	80 81       	ld	r24, Z
    3214:	89 2b       	or	r24, r25
    3216:	8c 93       	st	X, r24
		/* PWM Mode */
		CLEAR_BIT(TCCR2,WGM20);
    3218:	a5 e4       	ldi	r26, 0x45	; 69
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e5 e4       	ldi	r30, 0x45	; 69
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	8f 7b       	andi	r24, 0xBF	; 191
    3224:	8c 93       	st	X, r24
		SET_BIT(TCCR2,WGM21);
    3226:	a5 e4       	ldi	r26, 0x45	; 69
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e5 e4       	ldi	r30, 0x45	; 69
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	88 60       	ori	r24, 0x08	; 8
    3232:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    3234:	a4 e4       	ldi	r26, 0x44	; 68
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	83 81       	ldd	r24, Z+3	; 0x03
    323e:	8c 93       	st	X, r24
            match when downcounting.

		 *  Set OC0 on compare match when up-counting. Clear OC0 on compare
            match when downcounting.
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    3240:	a5 e4       	ldi	r26, 0x45	; 69
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e5 e4       	ldi	r30, 0x45	; 69
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	28 2f       	mov	r18, r24
    324c:	2f 7c       	andi	r18, 0xCF	; 207
    324e:	e9 81       	ldd	r30, Y+1	; 0x01
    3250:	fa 81       	ldd	r31, Y+2	; 0x02
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	88 2f       	mov	r24, r24
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	82 95       	swap	r24
    325a:	92 95       	swap	r25
    325c:	90 7f       	andi	r25, 0xF0	; 240
    325e:	98 27       	eor	r25, r24
    3260:	80 7f       	andi	r24, 0xF0	; 240
    3262:	98 27       	eor	r25, r24
    3264:	82 2b       	or	r24, r18
    3266:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    3268:	e9 e5       	ldi	r30, 0x59	; 89
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 e4       	ldi	r24, 0x40	; 64
    326e:	80 83       	st	Z, r24
    3270:	3c c0       	rjmp	.+120    	; 0x32ea <TIMER2_init+0x156>
	}
	else if (Config_Ptr -> mode == CTC)
    3272:	e9 81       	ldd	r30, Y+1	; 0x01
    3274:	fa 81       	ldd	r31, Y+2	; 0x02
    3276:	81 81       	ldd	r24, Z+1	; 0x01
    3278:	82 30       	cpi	r24, 0x02	; 2
    327a:	b9 f5       	brne	.+110    	; 0x32ea <TIMER2_init+0x156>
	{
		/* COMPARE Mode */
		SET_BIT(TCCR2,WGM21);
    327c:	a5 e4       	ldi	r26, 0x45	; 69
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e5 e4       	ldi	r30, 0x45	; 69
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	88 60       	ori	r24, 0x08	; 8
    3288:	8c 93       	st	X, r24
		/* To choose pre-scale */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> prescaler);
    328a:	a5 e4       	ldi	r26, 0x45	; 69
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e5 e4       	ldi	r30, 0x45	; 69
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	98 2f       	mov	r25, r24
    3296:	98 7f       	andi	r25, 0xF8	; 248
    3298:	e9 81       	ldd	r30, Y+1	; 0x01
    329a:	fa 81       	ldd	r31, Y+2	; 0x02
    329c:	80 81       	ld	r24, Z
    329e:	89 2b       	or	r24, r25
    32a0:	8c 93       	st	X, r24
		/* To choose the initial value */
		TCNT2= Config_Ptr -> value;
    32a2:	a4 e4       	ldi	r26, 0x44	; 68
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e9 81       	ldd	r30, Y+1	; 0x01
    32a8:	fa 81       	ldd	r31, Y+2	; 0x02
    32aa:	83 81       	ldd	r24, Z+3	; 0x03
    32ac:	8c 93       	st	X, r24

		 *  Clear OC0 on compare match

		 *  Set OC0 on compare match
		 */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr -> outputMode)<<4);
    32ae:	a5 e4       	ldi	r26, 0x45	; 69
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e5 e4       	ldi	r30, 0x45	; 69
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	28 2f       	mov	r18, r24
    32ba:	2f 7c       	andi	r18, 0xCF	; 207
    32bc:	e9 81       	ldd	r30, Y+1	; 0x01
    32be:	fa 81       	ldd	r31, Y+2	; 0x02
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	82 95       	swap	r24
    32c8:	92 95       	swap	r25
    32ca:	90 7f       	andi	r25, 0xF0	; 240
    32cc:	98 27       	eor	r25, r24
    32ce:	80 7f       	andi	r24, 0xF0	; 240
    32d0:	98 27       	eor	r25, r24
    32d2:	82 2b       	or	r24, r18
    32d4:	8c 93       	st	X, r24

		/* To choose compare value */
		OCR2= Config_Ptr -> compValue;
    32d6:	a3 e4       	ldi	r26, 0x43	; 67
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e9 81       	ldd	r30, Y+1	; 0x01
    32dc:	fa 81       	ldd	r31, Y+2	; 0x02
    32de:	84 81       	ldd	r24, Z+4	; 0x04
    32e0:	8c 93       	st	X, r24

		/* To enable Interrupt */
		TIMSK = (1<<TOIE2);
    32e2:	e9 e5       	ldi	r30, 0x59	; 89
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 e4       	ldi	r24, 0x40	; 64
    32e8:	80 83       	st	Z, r24
	}
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <TIMER2_stop>:

void TIMER2_stop(void)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
	/* Stop the Timer */
	TCCR2=0;
    32fc:	e5 e4       	ldi	r30, 0x45	; 69
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	10 82       	st	Z, r1
}
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate,UART_configType *config_ptr)
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	28 97       	sbiw	r28, 0x08	; 8
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	6b 83       	std	Y+3, r22	; 0x03
    331e:	7c 83       	std	Y+4, r23	; 0x04
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	58 87       	std	Y+8, r21	; 0x08
    3326:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    3328:	1a 82       	std	Y+2, r1	; 0x02
    332a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    332c:	eb e2       	ldi	r30, 0x2B	; 43
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3334:	ea e2       	ldi	r30, 0x2A	; 42
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	88 e1       	ldi	r24, 0x18	; 24
    333a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (UCSRC&0xCF)|((config_ptr->parityType)<<4);
    333c:	a0 e4       	ldi	r26, 0x40	; 64
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e0 e4       	ldi	r30, 0x40	; 64
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	28 2f       	mov	r18, r24
    3348:	2f 7c       	andi	r18, 0xCF	; 207
    334a:	ef 81       	ldd	r30, Y+7	; 0x07
    334c:	f8 85       	ldd	r31, Y+8	; 0x08
    334e:	84 81       	ldd	r24, Z+4	; 0x04
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	82 95       	swap	r24
    3356:	92 95       	swap	r25
    3358:	90 7f       	andi	r25, 0xF0	; 240
    335a:	98 27       	eor	r25, r24
    335c:	80 7f       	andi	r24, 0xF0	; 240
    335e:	98 27       	eor	r25, r24
    3360:	82 2b       	or	r24, r18
    3362:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((config_ptr->stopBit)<<3);
    3364:	a0 e4       	ldi	r26, 0x40	; 64
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e0 e4       	ldi	r30, 0x40	; 64
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	28 2f       	mov	r18, r24
    3370:	27 7f       	andi	r18, 0xF7	; 247
    3372:	ef 81       	ldd	r30, Y+7	; 0x07
    3374:	f8 85       	ldd	r31, Y+8	; 0x08
    3376:	85 81       	ldd	r24, Z+5	; 0x05
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	82 2b       	or	r24, r18
    338a:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((config_ptr->dataSize)<<1);
    338c:	a0 e4       	ldi	r26, 0x40	; 64
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e0 e4       	ldi	r30, 0x40	; 64
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	28 2f       	mov	r18, r24
    3398:	29 7f       	andi	r18, 0xF9	; 249
    339a:	ef 81       	ldd	r30, Y+7	; 0x07
    339c:	f8 85       	ldd	r31, Y+8	; 0x08
    339e:	86 81       	ldd	r24, Z+6	; 0x06
    33a0:	88 2f       	mov	r24, r24
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	88 0f       	add	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	82 2b       	or	r24, r18
    33aa:	8c 93       	st	X, r24
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    33ac:	e0 e4       	ldi	r30, 0x40	; 64
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	86 e8       	ldi	r24, 0x86	; 134
    33b2:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	ad 81       	ldd	r26, Y+5	; 0x05
    33ba:	be 81       	ldd	r27, Y+6	; 0x06
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	aa 1f       	adc	r26, r26
    33c2:	bb 1f       	adc	r27, r27
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	aa 1f       	adc	r26, r26
    33d2:	bb 1f       	adc	r27, r27
    33d4:	9c 01       	movw	r18, r24
    33d6:	ad 01       	movw	r20, r26
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	92 e1       	ldi	r25, 0x12	; 18
    33dc:	aa e7       	ldi	r26, 0x7A	; 122
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 9f 1a 	call	0x353e	; 0x353e <__udivmodsi4>
    33e8:	da 01       	movw	r26, r20
    33ea:	c9 01       	movw	r24, r18
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    33f2:	e0 e4       	ldi	r30, 0x40	; 64
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	89 2f       	mov	r24, r25
    33fc:	99 27       	eor	r25, r25
    33fe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3400:	e9 e2       	ldi	r30, 0x29	; 41
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	80 83       	st	Z, r24
}
    3408:	28 96       	adiw	r28, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	0f 92       	push	r0
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3426:	eb e2       	ldi	r30, 0x2B	; 43
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	80 72       	andi	r24, 0x20	; 32
    3432:	90 70       	andi	r25, 0x00	; 0
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	b9 f3       	breq	.-18     	; 0x3426 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3438:	ec e2       	ldi	r30, 0x2C	; 44
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3440:	0f 90       	pop	r0
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	08 95       	ret

00003448 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3450:	eb e2       	ldi	r30, 0x2B	; 43
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	88 23       	and	r24, r24
    3458:	dc f7       	brge	.-10     	; 0x3450 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    345a:	ec e2       	ldi	r30, 0x2C	; 44
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
}
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	00 d0       	rcall	.+0      	; 0x346c <UART_sendString+0x6>
    346c:	0f 92       	push	r0
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	9b 83       	std	Y+3, r25	; 0x03
    3474:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3476:	19 82       	std	Y+1, r1	; 0x01
    3478:	0e c0       	rjmp	.+28     	; 0x3496 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	fc 01       	movw	r30, r24
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	80 81       	ld	r24, Z
    348c:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_sendByte>
		i++;
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	9b 81       	ldd	r25, Y+3	; 0x03
    34a0:	fc 01       	movw	r30, r24
    34a2:	e2 0f       	add	r30, r18
    34a4:	f3 1f       	adc	r31, r19
    34a6:	80 81       	ld	r24, Z
    34a8:	88 23       	and	r24, r24
    34aa:	39 f7       	brne	.-50     	; 0x347a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	df 93       	push	r29
    34be:	cf 93       	push	r28
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <UART_receiveString+0xa>
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	9b 83       	std	Y+3, r25	; 0x03
    34ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34cc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	8c 01       	movw	r16, r24
    34da:	02 0f       	add	r16, r18
    34dc:	13 1f       	adc	r17, r19
    34de:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_recieveByte>
    34e2:	f8 01       	movw	r30, r16
    34e4:	80 83       	st	Z, r24
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	9b 81       	ldd	r25, Y+3	; 0x03
    34f8:	8c 01       	movw	r16, r24
    34fa:	02 0f       	add	r16, r18
    34fc:	13 1f       	adc	r17, r19
    34fe:	0e 94 24 1a 	call	0x3448	; 0x3448 <UART_recieveByte>
    3502:	f8 01       	movw	r30, r16
    3504:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	9b 81       	ldd	r25, Y+3	; 0x03
    3510:	fc 01       	movw	r30, r24
    3512:	e2 0f       	add	r30, r18
    3514:	f3 1f       	adc	r31, r19
    3516:	80 81       	ld	r24, Z
    3518:	83 32       	cpi	r24, 0x23	; 35
    351a:	31 f7       	brne	.-52     	; 0x34e8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	9b 81       	ldd	r25, Y+3	; 0x03
    3526:	fc 01       	movw	r30, r24
    3528:	e2 0f       	add	r30, r18
    352a:	f3 1f       	adc	r31, r19
    352c:	10 82       	st	Z, r1
}
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	cf 91       	pop	r28
    3536:	df 91       	pop	r29
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	08 95       	ret

0000353e <__udivmodsi4>:
    353e:	a1 e2       	ldi	r26, 0x21	; 33
    3540:	1a 2e       	mov	r1, r26
    3542:	aa 1b       	sub	r26, r26
    3544:	bb 1b       	sub	r27, r27
    3546:	fd 01       	movw	r30, r26
    3548:	0d c0       	rjmp	.+26     	; 0x3564 <__udivmodsi4_ep>

0000354a <__udivmodsi4_loop>:
    354a:	aa 1f       	adc	r26, r26
    354c:	bb 1f       	adc	r27, r27
    354e:	ee 1f       	adc	r30, r30
    3550:	ff 1f       	adc	r31, r31
    3552:	a2 17       	cp	r26, r18
    3554:	b3 07       	cpc	r27, r19
    3556:	e4 07       	cpc	r30, r20
    3558:	f5 07       	cpc	r31, r21
    355a:	20 f0       	brcs	.+8      	; 0x3564 <__udivmodsi4_ep>
    355c:	a2 1b       	sub	r26, r18
    355e:	b3 0b       	sbc	r27, r19
    3560:	e4 0b       	sbc	r30, r20
    3562:	f5 0b       	sbc	r31, r21

00003564 <__udivmodsi4_ep>:
    3564:	66 1f       	adc	r22, r22
    3566:	77 1f       	adc	r23, r23
    3568:	88 1f       	adc	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	1a 94       	dec	r1
    356e:	69 f7       	brne	.-38     	; 0x354a <__udivmodsi4_loop>
    3570:	60 95       	com	r22
    3572:	70 95       	com	r23
    3574:	80 95       	com	r24
    3576:	90 95       	com	r25
    3578:	9b 01       	movw	r18, r22
    357a:	ac 01       	movw	r20, r24
    357c:	bd 01       	movw	r22, r26
    357e:	cf 01       	movw	r24, r30
    3580:	08 95       	ret

00003582 <__prologue_saves__>:
    3582:	2f 92       	push	r2
    3584:	3f 92       	push	r3
    3586:	4f 92       	push	r4
    3588:	5f 92       	push	r5
    358a:	6f 92       	push	r6
    358c:	7f 92       	push	r7
    358e:	8f 92       	push	r8
    3590:	9f 92       	push	r9
    3592:	af 92       	push	r10
    3594:	bf 92       	push	r11
    3596:	cf 92       	push	r12
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	ca 1b       	sub	r28, r26
    35ac:	db 0b       	sbc	r29, r27
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	09 94       	ijmp

000035ba <__epilogue_restores__>:
    35ba:	2a 88       	ldd	r2, Y+18	; 0x12
    35bc:	39 88       	ldd	r3, Y+17	; 0x11
    35be:	48 88       	ldd	r4, Y+16	; 0x10
    35c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    35cc:	b9 84       	ldd	r11, Y+9	; 0x09
    35ce:	c8 84       	ldd	r12, Y+8	; 0x08
    35d0:	df 80       	ldd	r13, Y+7	; 0x07
    35d2:	ee 80       	ldd	r14, Y+6	; 0x06
    35d4:	fd 80       	ldd	r15, Y+5	; 0x05
    35d6:	0c 81       	ldd	r16, Y+4	; 0x04
    35d8:	1b 81       	ldd	r17, Y+3	; 0x03
    35da:	aa 81       	ldd	r26, Y+2	; 0x02
    35dc:	b9 81       	ldd	r27, Y+1	; 0x01
    35de:	ce 0f       	add	r28, r30
    35e0:	d1 1d       	adc	r29, r1
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	ed 01       	movw	r28, r26
    35ee:	08 95       	ret

000035f0 <itoa>:
    35f0:	fb 01       	movw	r30, r22
    35f2:	9f 01       	movw	r18, r30
    35f4:	e8 94       	clt
    35f6:	42 30       	cpi	r20, 0x02	; 2
    35f8:	c4 f0       	brlt	.+48     	; 0x362a <itoa+0x3a>
    35fa:	45 32       	cpi	r20, 0x25	; 37
    35fc:	b4 f4       	brge	.+44     	; 0x362a <itoa+0x3a>
    35fe:	4a 30       	cpi	r20, 0x0A	; 10
    3600:	29 f4       	brne	.+10     	; 0x360c <itoa+0x1c>
    3602:	97 fb       	bst	r25, 7
    3604:	1e f4       	brtc	.+6      	; 0x360c <itoa+0x1c>
    3606:	90 95       	com	r25
    3608:	81 95       	neg	r24
    360a:	9f 4f       	sbci	r25, 0xFF	; 255
    360c:	64 2f       	mov	r22, r20
    360e:	77 27       	eor	r23, r23
    3610:	0e 94 29 1b 	call	0x3652	; 0x3652 <__udivmodhi4>
    3614:	80 5d       	subi	r24, 0xD0	; 208
    3616:	8a 33       	cpi	r24, 0x3A	; 58
    3618:	0c f0       	brlt	.+2      	; 0x361c <itoa+0x2c>
    361a:	89 5d       	subi	r24, 0xD9	; 217
    361c:	81 93       	st	Z+, r24
    361e:	cb 01       	movw	r24, r22
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	a1 f7       	brne	.-24     	; 0x360c <itoa+0x1c>
    3624:	16 f4       	brtc	.+4      	; 0x362a <itoa+0x3a>
    3626:	5d e2       	ldi	r21, 0x2D	; 45
    3628:	51 93       	st	Z+, r21
    362a:	10 82       	st	Z, r1
    362c:	c9 01       	movw	r24, r18
    362e:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <strrev>

00003632 <strrev>:
    3632:	dc 01       	movw	r26, r24
    3634:	fc 01       	movw	r30, r24
    3636:	67 2f       	mov	r22, r23
    3638:	71 91       	ld	r23, Z+
    363a:	77 23       	and	r23, r23
    363c:	e1 f7       	brne	.-8      	; 0x3636 <strrev+0x4>
    363e:	32 97       	sbiw	r30, 0x02	; 2
    3640:	04 c0       	rjmp	.+8      	; 0x364a <strrev+0x18>
    3642:	7c 91       	ld	r23, X
    3644:	6d 93       	st	X+, r22
    3646:	70 83       	st	Z, r23
    3648:	62 91       	ld	r22, -Z
    364a:	ae 17       	cp	r26, r30
    364c:	bf 07       	cpc	r27, r31
    364e:	c8 f3       	brcs	.-14     	; 0x3642 <strrev+0x10>
    3650:	08 95       	ret

00003652 <__udivmodhi4>:
    3652:	aa 1b       	sub	r26, r26
    3654:	bb 1b       	sub	r27, r27
    3656:	51 e1       	ldi	r21, 0x11	; 17
    3658:	07 c0       	rjmp	.+14     	; 0x3668 <__udivmodhi4_ep>

0000365a <__udivmodhi4_loop>:
    365a:	aa 1f       	adc	r26, r26
    365c:	bb 1f       	adc	r27, r27
    365e:	a6 17       	cp	r26, r22
    3660:	b7 07       	cpc	r27, r23
    3662:	10 f0       	brcs	.+4      	; 0x3668 <__udivmodhi4_ep>
    3664:	a6 1b       	sub	r26, r22
    3666:	b7 0b       	sbc	r27, r23

00003668 <__udivmodhi4_ep>:
    3668:	88 1f       	adc	r24, r24
    366a:	99 1f       	adc	r25, r25
    366c:	5a 95       	dec	r21
    366e:	a9 f7       	brne	.-22     	; 0x365a <__udivmodhi4_loop>
    3670:	80 95       	com	r24
    3672:	90 95       	com	r25
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	08 95       	ret

0000367a <_exit>:
    367a:	f8 94       	cli

0000367c <__stop_program>:
    367c:	ff cf       	rjmp	.-2      	; 0x367c <__stop_program>
